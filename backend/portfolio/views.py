from operator import index
from django.shortcuts import render
from django.http.response import JsonResponse
from numpy import empty
from pkg_resources import empty_provider
from rest_framework.parsers import JSONParser 
from rest_framework import status
import time
from rest_framework.decorators import api_view

import FinanceDataReader as fdr
import yfinance as yf
import json

import pandas as pd
import numpy as np
import math
import datetime
from datetime import timedelta
from scipy.optimize import minimize
import csv
from urllib import parse
import os
import bt
import matplotlib.pyplot as plt
from pymongo import MongoClient

client = MongoClient(
        host='43.201.96.58', # 고정
        port = 27017,
        username = 'se',
        password = '1234'
    )

sector_data = {'반도체와반도체장비': [{'code': '365590', 'name': '하이딥'},
	 {'code': '112290', 'name': '영창케미칼'},
	 {'code': '311320', 'name': '지오엘리먼트'},
	 {'code': '119830', 'name': '아이텍'},
	 {'code': '405100', 'name': '큐알티'},
	 {'code': '053610', 'name': '프로텍'},
	 {'code': '080220', 'name': '제주반도체'},
	 {'code': '144960', 'name': '뉴파워프라즈마'},
	 {'code': '095340', 'name': 'ISC'},
	 {'code': '000990', 'name': 'DB하이텍'},
	 {'code': '011930', 'name': '신성이엔지'},
	 {'code': '252990', 'name': '샘씨엔에스'},
	 {'code': '102120', 'name': '어보브반도체'},
	 {'code': '322310', 'name': '오로스테크놀로지'},
	 {'code': '253590', 'name': '네오셈'},
	 {'code': '101490', 'name': '에스앤에스텍'},
	 {'code': '031980', 'name': '피에스케이홀딩스'},
	 {'code': '033170', 'name': '시그네틱스'},
	 {'code': '078350', 'name': '한양디지텍'},
	 {'code': '080580', 'name': '오킨스전자'},
	 {'code': '089030', 'name': '테크윙'},
	 {'code': '306620', 'name': '네온테크'},
	 {'code': '402340', 'name': 'SK스퀘어'},
	 {'code': '000660', 'name': 'SK하이닉스'},
	 {'code': '003160', 'name': '디아이'},
	 {'code': '114810', 'name': '한솔아이원스'},
	 {'code': '101160', 'name': '월덱스'},
	 {'code': '030530', 'name': '원익홀딩스'},
	 {'code': '067310', 'name': '하나마이크론'},
	 {'code': '029460', 'name': '케이씨'},
	 {'code': '089970', 'name': '에이피티씨'},
	 {'code': '122640', 'name': '예스티'},
	 {'code': '049080', 'name': '기가레인'},
	 {'code': '376190', 'name': '엘비루셈'},
	 {'code': '241770', 'name': '메카로'},
	 {'code': '195870', 'name': '해성디에스'},
	 {'code': '330860', 'name': '네패스아크'},
	 {'code': '077500', 'name': '유니퀘스트'},
	 {'code': '219130', 'name': '타이거일렉'},
	 {'code': '160980', 'name': '싸이맥스'},
	 {'code': '089890', 'name': '코세스'},
	 {'code': '264660', 'name': '씨앤지하이테크'},
	 {'code': '232140', 'name': '와이아이케이'},
	 {'code': '281820', 'name': '케이씨텍'},
	 {'code': '077360', 'name': '덕산하이메탈'},
	 {'code': '054450', 'name': '텔레칩스'},
	 {'code': '095610', 'name': '테스'},
	 {'code': '403870', 'name': 'HPSP'},
	 {'code': '357780', 'name': '솔브레인'},
	 {'code': '356860', 'name': '티엘비'},
	 {'code': '232680', 'name': '라온테크'},
	 {'code': '036200', 'name': '유니셈'},
	 {'code': '105330', 'name': '케이엔더블유'},
	 {'code': '005935', 'name': '삼성전자우'},
	 {'code': '064760', 'name': '티씨케이'},
	 {'code': '074600', 'name': '원익QnC'},
	 {'code': '083310', 'name': '엘오티베큠'},
	 {'code': '058470', 'name': '리노공업'},
	 {'code': '036540', 'name': 'SFA반도체'},
	 {'code': '079370', 'name': '제우스'},
	 {'code': '042700', 'name': '한미반도체'},
	 {'code': '131290', 'name': '티에스이'},
	 {'code': '071280', 'name': '로체시스템즈'},
	 {'code': '399720', 'name': '가온칩스'},
	 {'code': '094360', 'name': '칩스앤미디어'},
	 {'code': '092220', 'name': 'KEC'},
	 {'code': '183300', 'name': '코미코'},
	 {'code': '146320', 'name': '비씨엔씨'},
	 {'code': '036930', 'name': '주성엔지니어링'},
	 {'code': '039440', 'name': '에스티아이'},
	 {'code': '348210', 'name': '넥스틴'},
	 {'code': '084370', 'name': '유진테크'},
	 {'code': '061970', 'name': '엘비세미콘'},
	 {'code': '005930', 'name': '삼성전자'},
	 {'code': '039030', 'name': '이오테크닉스'},
	 {'code': '033160', 'name': '엠케이전자'},
	 {'code': '200710', 'name': '에이디테크놀로지'},
	 {'code': '082270', 'name': '젬백스'},
	 {'code': '140070', 'name': '서플러스글로벌'},
	 {'code': '166090', 'name': '하나머티리얼즈'},
	 {'code': '241790', 'name': '오션브릿지'},
	 {'code': '240810', 'name': '원익IPS'},
	 {'code': '033640', 'name': '네패스'},
	 {'code': '200470', 'name': '에이팩트'},
	 {'code': '394280', 'name': '오픈엣지테크놀로지'},
	 {'code': '131970', 'name': '두산테스나'},
	 {'code': '083450', 'name': 'GST'},
	 {'code': '005290', 'name': '동진쎄미켐'},
	 {'code': '059090', 'name': '미코'},
	 {'code': '396270', 'name': '넥스트칩'},
	 {'code': '064290', 'name': '인텍플러스'},
	 {'code': '092070', 'name': '디엔에프'},
	 {'code': '036810', 'name': '에프에스티'},
	 {'code': '319660', 'name': '피에스케이'},
	 {'code': '073570', 'name': 'WI'},
	 {'code': '086390', 'name': '유니테스트'},
	 {'code': '089530', 'name': '에이티세미콘'}],
    '은행': [{'code': '323410', 'name': '카카오뱅크'},
	 {'code': '038540', 'name': '상상인'},
	 {'code': '086790', 'name': '하나금융지주'},
	 {'code': '139130', 'name': 'DGB금융지주'},
	 {'code': '105560', 'name': 'KB금융'},
	 {'code': '316140', 'name': '우리금융지주'},
	 {'code': '138930', 'name': 'BNK금융지주'},
	 {'code': '175330', 'name': 'JB금융지주'},
	 {'code': '024110', 'name': '기업은행'},
	 {'code': '055550', 'name': '신한지주'},
	 {'code': '006220', 'name': '제주은행'}],
    '석유와가스': [{'code': '012320', 'name': '경동인베스트'},
	 {'code': '093230', 'name': '이아이디'},
	 {'code': '091090', 'name': '세원이앤씨'},
	 {'code': '126880', 'name': '제이엔케이히터'},
	 {'code': '006120', 'name': 'SK디스커버리'},
	 {'code': '128820', 'name': '대성산업'},
	 {'code': '002960', 'name': '한국쉘석유'},
	 {'code': '267250', 'name': 'HD현대'},
	 {'code': '096775', 'name': 'SK이노베이션우'},
	 {'code': '096770', 'name': 'SK이노베이션'},
	 {'code': '003650', 'name': '미창석유'},
	 {'code': '010955', 'name': 'S-Oil우'},
	 {'code': '014530', 'name': '극동유화'},
	 {'code': '010950', 'name': 'S-Oil'},
	 {'code': '078930', 'name': 'GS'},
	 {'code': '000440', 'name': '중앙에너비스'}],
    '화학': [{'code': '014680', 'name': '한솔케미칼'},
	 {'code': '051910', 'name': 'LG화학'},
	 {'code': '102710', 'name': '이엔에프테크놀로지'},
	 {'code': '383310', 'name': '에코프로에이치엔'},
	 {'code': '011780', 'name': '금호석유'},
	 {'code': '051915', 'name': 'LG화학우'},
	 {'code': '121600', 'name': '나노신소재'},
	 {'code': '178920', 'name': 'PI첨단소재'},
	 {'code': '055490', 'name': '테이팩스'},
	 {'code': '010060', 'name': 'OCI'},
	 {'code': '006840', 'name': 'AK홀딩스'},
	 {'code': '220260', 'name': '켐트로스'},
	 {'code': '104830', 'name': '원익머트리얼즈'},
	 {'code': '089010', 'name': '켐트로닉스'},
	 {'code': '003830', 'name': '대한화섬'},
	 {'code': '009830', 'name': '한화솔루션'},
	 {'code': '120110', 'name': '코오롱인더'},
	 {'code': '134380', 'name': '미원화학'},
	 {'code': '251370', 'name': '와이엠티'},
	 {'code': '093370', 'name': '후성'},
	 {'code': '086520', 'name': '에코프로'},
	 {'code': '002360', 'name': 'SH에너지화학'},
	 {'code': '104480', 'name': '티케이케미칼'},
	 {'code': '092230', 'name': 'KPX홀딩스'},
	 {'code': '012610', 'name': '경인양행'},
	 {'code': '011790', 'name': 'SKC'},
	 {'code': '069260', 'name': 'TKG휴켐스'},
	 {'code': '000210', 'name': 'DL'},
	 {'code': '033500', 'name': '동성화인텍'},
	 {'code': '281740', 'name': '레이크머티리얼즈'},
	 {'code': '294140', 'name': '레몬'},
	 {'code': '298050', 'name': '효성첨단소재'},
	 {'code': '011785', 'name': '금호석유우'},
	 {'code': '285130', 'name': 'SK케미칼'},
	 {'code': '023450', 'name': '동남합성'},
	 {'code': '002810', 'name': '삼영무역'},
	 {'code': '011500', 'name': '한농화성'},
	 {'code': '120240', 'name': '대정화금'},
	 {'code': '003240', 'name': '태광산업'},
	 {'code': '036670', 'name': 'KCI'},
	 {'code': '005950', 'name': '이수화학'},
	 {'code': '138490', 'name': '코오롱플라스틱'},
	 {'code': '239890', 'name': '피엔에이치테크'},
	 {'code': '002100', 'name': '경농'},
	 {'code': '005690', 'name': '파미셀'},
	 {'code': '025000', 'name': 'KPX케미칼'},
	 {'code': '107590', 'name': '미원홀딩스'},
	 {'code': '004090', 'name': '한국석유'},
	 {'code': '004430', 'name': '송원산업'},
	 {'code': '136410', 'name': '아셈스'},
	 {'code': '006650', 'name': '대한유화'},
	 {'code': '007690', 'name': '국도화학'},
	 {'code': '100250', 'name': '진양홀딩스'},
	 {'code': '002840', 'name': '미원상사'},
	 {'code': '001340', 'name': '백광산업'},
	 {'code': '003670', 'name': '포스코케미칼'},
	 {'code': '017890', 'name': '한국알콜'},
	 {'code': '101360', 'name': '이엔드디'},
	 {'code': '268280', 'name': '미원에스씨'},
	 {'code': '005420', 'name': '코스모화학'},
	 {'code': '005070', 'name': '코스모신소재'},
	 {'code': '102260', 'name': '동성케미컬'},
	 {'code': '014830', 'name': '유니드'},
	 {'code': '065560', 'name': '녹원씨엔아이'},
	 {'code': '083420', 'name': '그린케미칼'},
	 {'code': '900290', 'name': 'GRT'},
	 {'code': '006890', 'name': '태경케미컬'},
	 {'code': '298000', 'name': '효성화학'},
	 {'code': '004000', 'name': '롯데정밀화학'},
	 {'code': '025860', 'name': '남해화학'},
	 {'code': '357550', 'name': '석경에이티'},
	 {'code': '011170', 'name': '롯데케미칼'},
	 {'code': '161000', 'name': '애경케미칼'},
	 {'code': '001570', 'name': '금양'}],
    '양방향미디어와서비스': [{'code': '035720', 'name': '카카오'},
	 {'code': '035420', 'name': 'NAVER'},
	 {'code': '289220', 'name': '자이언트스텝'},
	 {'code': '067160', 'name': '아프리카TV'},
	 {'code': '214270', 'name': 'FSN'},
	 {'code': '020120', 'name': '키다리스튜디오'},
	 {'code': '057680', 'name': '티사이언티픽'},
	 {'code': '300080', 'name': '플리토'}],
    '복합기업': [{'code': '001740', 'name': 'SK네트웍스'},
	 {'code': '034730', 'name': 'SK'},
	 {'code': '02826K', 'name': '삼성물산우B'},
	 {'code': '003550', 'name': 'LG'},
	 {'code': '03473K', 'name': 'SK우'},
	 {'code': '028260', 'name': '삼성물산'},
	 {'code': '001040', 'name': 'CJ'},
	 {'code': '002020', 'name': '코오롱'},
	 {'code': '004800', 'name': '효성'},
	 {'code': '383800', 'name': 'LX홀딩스'},
	 {'code': '003555', 'name': 'LG우'},
	 {'code': '000155', 'name': '두산우'},
	 {'code': '001045', 'name': 'CJ우'},
	 {'code': '000150', 'name': '두산'},
	 {'code': '00104K', 'name': 'CJ4우(전환)'}],
    '자동차': [{'code': '000270', 'name': '기아'},
	 {'code': '005380', 'name': '현대차'},
	 {'code': '005389', 'name': '현대차3우B'},
	 {'code': '005385', 'name': '현대차우'},
	 {'code': '005387', 'name': '현대차2우B'},
	 {'code': '900140', 'name': '엘브이엠씨홀딩스'},
	 {'code': '003620', 'name': '쌍용차'},
	 {'code': '136510', 'name': '스마트솔루션즈'}],
    '제약': [{'code': '065660', 'name': '안트로젠'},
	 {'code': '028300', 'name': 'HLB'},
	 {'code': '067630', 'name': 'HLB생명과학'},
	 {'code': '086450', 'name': '동국제약'},
	 {'code': '214390', 'name': '경보제약'},
	 {'code': '302440', 'name': 'SK바이오사이언스'},
	 {'code': '200130', 'name': '콜마비앤에이치'},
	 {'code': '041960', 'name': '코미팜'},
	 {'code': '235980', 'name': '메드팩토'},
	 {'code': '068760', 'name': '셀트리온제약'},
	 {'code': '243070', 'name': '휴온스'},
	 {'code': '058820', 'name': 'CMG제약'},
	 {'code': '003090', 'name': '대웅'},
	 {'code': '019170', 'name': '신풍제약'},
	 {'code': '237690', 'name': '에스티팜'},
	 {'code': '066700', 'name': '테라젠이텍스'},
	 {'code': '195940', 'name': 'HK이노엔'},
	 {'code': '009420', 'name': '한올바이오파마'},
	 {'code': '000250', 'name': '삼천당제약'},
	 {'code': '091990', 'name': '셀트리온헬스케어'},
	 {'code': '326030', 'name': 'SK바이오팜'},
	 {'code': '365270', 'name': '큐라클'},
	 {'code': '310210', 'name': '보로노이'},
	 {'code': '096760', 'name': 'JW홀딩스'},
	 {'code': '314130', 'name': '지놈앤컴퍼니'},
	 {'code': '001630', 'name': '종근당홀딩스'},
	 {'code': '183490', 'name': '엔지켐생명과학'},
	 {'code': '084110', 'name': '휴온스글로벌'},
	 {'code': '271980', 'name': '제일약품'},
	 {'code': '115450', 'name': 'HLB테라퓨틱스'},
	 {'code': '323990', 'name': '박셀바이오'},
	 {'code': '397030', 'name': '에이프릴바이오'},
	 {'code': '194700', 'name': '노바렉스'},
	 {'code': '068270', 'name': '셀트리온'},
	 {'code': '003220', 'name': '대원제약'},
	 {'code': '047920', 'name': 'HLB제약'},
	 {'code': '200670', 'name': '휴메딕스'},
	 {'code': '334970', 'name': '프레스티지바이오로직스'},
	 {'code': '074430', 'name': '아미노로직스'},
	 {'code': '185750', 'name': '종근당'},
	 {'code': '261780', 'name': '차백신연구소'},
	 {'code': '000100', 'name': '유한양행'},
	 {'code': '005250', 'name': '녹십자홀딩스'},
	 {'code': '032300', 'name': '한국파마'},
	 {'code': '234080', 'name': 'JW생명과학'},
	 {'code': '001360', 'name': '삼성제약'},
	 {'code': '099430', 'name': '바이오플러스'},
	 {'code': '001060', 'name': 'JW중외제약'},
	 {'code': '284620', 'name': '카이노스메드'},
	 {'code': '003000', 'name': '부광약품'},
	 {'code': '002390', 'name': '한독'},
	 {'code': '239610', 'name': '에이치엘사이언스'},
	 {'code': '950210', 'name': '프레스티지바이오파마'},
	 {'code': '011040', 'name': '경동제약'},
	 {'code': '220100', 'name': '퓨쳐켐'},
	 {'code': '053030', 'name': '바이넥스'},
	 {'code': '054670', 'name': '대한뉴팜'},
	 {'code': '128940', 'name': '한미약품'},
	 {'code': '063160', 'name': '종근당바이오'},
	 {'code': '061250', 'name': '화일약품'},
	 {'code': '234690', 'name': '녹십자웰빙'},
	 {'code': '006280', 'name': '녹십자'},
	 {'code': '009290', 'name': '광동제약'},
	 {'code': '016580', 'name': '환인제약'},
	 {'code': '377220', 'name': '프롬바이오'},
	 {'code': '378800', 'name': '샤페론'},
	 {'code': '006620', 'name': '동구바이오제약'},
	 {'code': '249420', 'name': '일동제약'},
	 {'code': '293480', 'name': '하나제약'},
	 {'code': '000020', 'name': '동화약품'},
	 {'code': '000640', 'name': '동아쏘시오홀딩스'},
	 {'code': '002620', 'name': '제일파마홀딩스'},
	 {'code': '003850', 'name': '보령'},
	 {'code': '072020', 'name': '중앙백신'},
	 {'code': '321550', 'name': '티움바이오'},
	 {'code': '950220', 'name': '네오이뮨텍'},
	 {'code': '307750', 'name': '국전약품'},
	 {'code': '001540', 'name': '안국약품'},
	 {'code': '004310', 'name': '현대약품'},
	 {'code': '003060', 'name': '에이프로젠제약'},
	 {'code': '102460', 'name': '이연제약'},
	 {'code': '067290', 'name': 'JW신약'},
	 {'code': '153710', 'name': '옵티팜'},
	 {'code': '060590', 'name': '씨티씨바이오'},
	 {'code': '330350', 'name': '위더스제약'},
	 {'code': '082800', 'name': '비보존 헬스케어'},
	 {'code': '000220', 'name': '유유제약'},
	 {'code': '308080', 'name': '바이젠셀'},
	 {'code': '004720', 'name': '팜젠사이언스'},
	 {'code': '000520', 'name': '삼일제약'},
	 {'code': '102940', 'name': '코오롱생명과학'},
	 {'code': '000230', 'name': '일동홀딩스'},
	 {'code': '003120', 'name': '일성신약'},
	 {'code': '033270', 'name': '유나이티드제약'},
	 {'code': '293780', 'name': '압타바이오'},
	 {'code': '023910', 'name': '대한약품'},
	 {'code': '069620', 'name': '대웅제약'},
	 {'code': '086890', 'name': '이수앱지스'},
	 {'code': '003520', 'name': '영진약품'},
	 {'code': '008930', 'name': '한미사이언스'},
	 {'code': '002210', 'name': '동성제약'},
	 {'code': '007570', 'name': '일양약품'},
	 {'code': '170900', 'name': '동아에스티'},
	 {'code': '203400', 'name': '에이비온'},
	 {'code': '288330', 'name': '브릿지바이오테라퓨틱스'},
	 {'code': '214450', 'name': '파마리서치'},
	 {'code': '005500', 'name': '삼진제약'},
	 {'code': '207940', 'name': '삼성바이오로직스'},
	 {'code': '314140', 'name': '알피바이오'},
	 {'code': '067080', 'name': '대화제약'}],
    '비철금속': [{'code': '103140', 'name': '풍산'},
	 {'code': '005810', 'name': '풍산홀딩스'},
	 {'code': '012800', 'name': '대창'},
	 {'code': '004560', 'name': '현대비앤지스틸'},
	 {'code': '396300', 'name': '세아메카닉스'},
	 {'code': '024090', 'name': '디씨엠'},
	 {'code': '058430', 'name': '포스코스틸리온'},
	 {'code': '025820', 'name': '이구산업'},
	 {'code': '010040', 'name': '한국내화'},
	 {'code': '015890', 'name': '태경산업'},
	 {'code': '081000', 'name': '일진다이아'},
	 {'code': '010130', 'name': '고려아연'},
	 {'code': '155660', 'name': 'DSR'},
	 {'code': '001780', 'name': '알루코'},
	 {'code': '032560', 'name': '황금에스티'},
	 {'code': '000480', 'name': '조선내화'},
	 {'code': '008350', 'name': '남선알미늄'},
	 {'code': '009190', 'name': '대양금속'},
	 {'code': '018470', 'name': '조일알미늄'},
	 {'code': '014580', 'name': '태경비케이'},
	 {'code': '006110', 'name': '삼아알미늄'},
	 {'code': '081150', 'name': '티플랙스'}],
    '화장품': [{'code': '078520', 'name': '에이블씨엔씨'},
	 {'code': '237880', 'name': '클리오'},
	 {'code': '226320', 'name': '잇츠한불'},
	 {'code': '090430', 'name': '아모레퍼시픽'},
	 {'code': '192820', 'name': '코스맥스'},
	 {'code': '123690', 'name': '한국화장품'},
	 {'code': '090435', 'name': '아모레퍼시픽우'},
	 {'code': '092730', 'name': '네오팜'},
	 {'code': '138360', 'name': '협진'},
	 {'code': '051900', 'name': 'LG생활건강'},
	 {'code': '002790', 'name': '아모레G'},
	 {'code': '00279K', 'name': '아모레G3우(전환)'},
	 {'code': '018290', 'name': '브이티지엠피'},
	 {'code': '051905', 'name': 'LG생활건강우'},
	 {'code': '168330', 'name': '내츄럴엔도텍'},
	 {'code': '161890', 'name': '한국콜마'},
	 {'code': '024720', 'name': '한국콜마홀딩스'},
	 {'code': '018700', 'name': '바른손'},
	 {'code': '352480', 'name': '씨앤씨인터내셔널'},
	 {'code': '126560', 'name': '현대퓨처넷'},
	 {'code': '027050', 'name': '코리아나'},
	 {'code': '018250', 'name': '애경산업'},
	 {'code': '052260', 'name': '현대바이오랜드'},
	 {'code': '214260', 'name': '라파스'},
	 {'code': '244460', 'name': '올리패스'},
	 {'code': '048410', 'name': '현대바이오'}],
    '부동산': [{'code': '365550', 'name': 'ESR켄달스퀘어리츠'},
	 {'code': '404990', 'name': '신한서부티엔디리츠'},
	 {'code': '330590', 'name': '롯데리츠'},
	 {'code': '348950', 'name': '제이알글로벌리츠'},
	 {'code': '088260', 'name': '이리츠코크렙'},
	 {'code': '034830', 'name': '한국토지신탁'},
	 {'code': '400760', 'name': 'NH올원리츠'},
	 {'code': '357120', 'name': '코람코에너지리츠'},
	 {'code': '396690', 'name': '미래에셋글로벌리츠'},
	 {'code': '395400', 'name': 'SK리츠'},
	 {'code': '334890', 'name': '이지스밸류리츠'},
	 {'code': '293940', 'name': '신한알파리츠'},
	 {'code': '350520', 'name': '이지스레지던스리츠'},
	 {'code': '417310', 'name': '코람코더원리츠'},
	 {'code': '377190', 'name': '디앤디플랫폼리츠'},
	 {'code': '123890', 'name': '한국자산신탁'},
	 {'code': '210980', 'name': 'SK디앤디'}],
    '우주항공과국방': [{'code': '274090', 'name': '켄코아에어로스페이스'},
	 {'code': '215090', 'name': '휴센텍'},
	 {'code': '067390', 'name': '아스트'},
	 {'code': '079550', 'name': 'LIG넥스원'},
	 {'code': '047810', 'name': '한국항공우주'},
	 {'code': '099320', 'name': '쎄트렉아이'},
	 {'code': '361390', 'name': '제노코'},
	 {'code': '065450', 'name': '빅텍'},
	 {'code': '272210', 'name': '한화시스템'},
	 {'code': '010820', 'name': '퍼스텍'},
	 {'code': '214430', 'name': '아이쓰리시스템'},
	 {'code': '012450', 'name': '한화에어로스페이스'}],
    '항공사': [{'code': '272450', 'name': '진에어'},
	 {'code': '020560', 'name': '아시아나항공'},
	 {'code': '089590', 'name': '제주항공'},
	 {'code': '091810', 'name': '티웨이항공'},
	 {'code': '003490', 'name': '대한항공'},
	 {'code': '180640', 'name': '한진칼'},
	 {'code': '298690', 'name': '에어부산'}],
    '레저용장비와제품': [{'code': '002450', 'name': '삼익악기'},
	 {'code': '121440', 'name': '골프존뉴딘홀딩스'},
	 {'code': '088390', 'name': '이녹스'}],
    '항공화물운송과물류': [{'code': '009070', 'name': 'KCTC'},
	 {'code': '004140', 'name': '동방'},
	 {'code': '000700', 'name': '유수홀딩스'},
	 {'code': '000120', 'name': 'CJ대한통운'},
	 {'code': '004360', 'name': '세방'},
	 {'code': '002320', 'name': '한진'},
	 {'code': '086280', 'name': '현대글로비스'}],
    '백화점과일반상점': [{'code': '069960', 'name': '현대백화점'},
	 {'code': '037710', 'name': '광주신세계'},
	 {'code': '067830', 'name': '세이브존I&C'},
	 {'code': '019010', 'name': '베뉴지'},
	 {'code': '950170', 'name': 'JTC'},
	 {'code': '027410', 'name': 'BGF'},
	 {'code': '007070', 'name': 'GS리테일'},
	 {'code': '006370', 'name': '대구백화점'},
	 {'code': '023530', 'name': '롯데쇼핑'},
	 {'code': '282330', 'name': 'BGF리테일'},
	 {'code': '004170', 'name': '신세계'},
	 {'code': '139480', 'name': '이마트'}],
    '손해보험': [{'code': '003690', 'name': '코리안리'},
	 {'code': '001450', 'name': '현대해상'},
	 {'code': '000815', 'name': '삼성화재우'},
	 {'code': '000400', 'name': '롯데손해보험'},
	 {'code': '005830', 'name': 'DB손해보험'},
	 {'code': '000060', 'name': '메리츠화재'},
	 {'code': '000540', 'name': '흥국화재'},
	 {'code': '000810', 'name': '삼성화재'},
	 {'code': '000370', 'name': '한화손해보험'},
	 {'code': '244920', 'name': '에이플러스에셋'}],
    '다각화된통신서비스': [{'code': '025770', 'name': '한국정보통신'},
	 {'code': '036630', 'name': '세종텔레콤'},
	 {'code': '006490', 'name': '인스코비'},
	 {'code': '030200', 'name': 'KT'}],
    '무선통신서비스': [{'code': '065530', 'name': '와이어블'},
	 {'code': '017670', 'name': 'SK텔레콤'},
	 {'code': '032640', 'name': 'LG유플러스'}],
    '운송인프라': [{'code': '065710', 'name': '서호전기'},
	 {'code': '319400', 'name': '현재무벡스'},
	 {'code': '005430', 'name': '한국공항'},
	 {'code': '088980', 'name': '맥쿼리인프라'},
	 {'code': '003100', 'name': '선광'}],
    '생명보험': [{'code': '085620', 'name': '미래에셋생명'},
	 {'code': '088350', 'name': '한화생명'},
	 {'code': '082640', 'name': '동양생명'},
	 {'code': '032830', 'name': '삼성생명'},
	 {'code': '000880', 'name': '한화'},
	 {'code': '00088K', 'name': '한화3우B'}],
    '도로와철도운송': [{'code': '038390', 'name': '레드캡투어'},
	 {'code': '068400', 'name': 'SK렌터카'},
	 {'code': '089860', 'name': '롯데렌탈'},
	 {'code': '095570', 'name': 'AJ네트웍스'},
	 {'code': '403550', 'name': '쏘카'}],
    '무역회사와판매업체': [{'code': '011810', 'name': 'STX'},
	 {'code': '001120', 'name': 'LX인터내셔널'},
	 {'code': '001250', 'name': 'GS글로벌'},
	 {'code': '047050', 'name': '포스코인터내셔널'},
	 {'code': '011760', 'name': '현대코퍼레이션'}],
    '문구류': [{'code': '068290', 'name': '삼성출판사'}], '호텔,레스토랑,레저': [{'code': '032350', 'name': '롯데관광개발'},
	 {'code': '034230', 'name': '파라다이스'},
	 {'code': '114090', 'name': 'GKL'},
	 {'code': '035250', 'name': '강원랜드'},
	 {'code': '084680', 'name': '이월드'},
	 {'code': '111710', 'name': '남화산업'},
	 {'code': '006730', 'name': '서부T&D'},
	 {'code': '006730', 'name': '노랑풍선'},
	 {'code': '039130', 'name': '하나투어'},
	 {'code': '031440', 'name': '신세계푸드'},
	 {'code': '008770', 'name': '호텔신라'},
	 {'code': '070960', 'name': '용평리조트'},
	 {'code': '094850', 'name': '참좋은여행'},
	 {'code': '080160', 'name': '모두투어'},
	 {'code': '025980', 'name': '아난티'}],
    '가스유틸리티': [{'code': '016710', 'name': '대성홀딩스'},
	 {'code': '004690', 'name': '삼천리'},
	 {'code': '267290', 'name': '경동도시가스'},
	 {'code': '017940', 'name': 'E1'},
	 {'code': '003480', 'name': '한진중공업홀딩스'},
	 {'code': '036460', 'name': '한국가스공사'},
	 {'code': '017390', 'name': '서울가스'},
	 {'code': '018670', 'name': 'SK가스'},
	 {'code': '015360', 'name': '예스코홀딩스'},
	 {'code': '053050', 'name': '지에스이'},
	 {'code': '034590', 'name': '인천도시가스'},
	 {'code': '117580', 'name': '대성에너지'}],
    '건강관리업체및서비스': [{'code': '226330', 'name': '신테카바이오'},
	 {'code': '144510', 'name': '지씨셀'}],
    '종이와목재': [{'code': '006740', 'name': '영풍제지'},
	 {'code': '009200', 'name': '무림페이퍼'},
	 {'code': '004540', 'name': '깨끗한나라'},
	 {'code': '000180', 'name': '성창기업지주'},
	 {'code': '004150', 'name': '한솔홀딩스'},
	 {'code': '034810', 'name': '해성산업'},
	 {'code': '213500', 'name': '한솔제지'},
	 {'code': '009580', 'name': '무림P&P'},
	 {'code': '078130', 'name': '국일제지'}],
    '디스플레이패널': [{'code': '034220', 'name': 'LG디스플레이'},
	 {'code': '052330', 'name': '코텍'},
	 {'code': '121800', 'name': '비덴트'}],
    '가정용품': [{'code': '012690', 'name': '모나리자'}],   '교육서비스': [{'code': '035290', 'name': '골드앤에스'},
	 {'code': '068930', 'name': '디지털대성'},
	 {'code': '067280', 'name': '멀티캠퍼스'},
	 {'code': '095720', 'name': '웅진씽크빅'},
	 {'code': '019680', 'name': '대교'},
	 {'code': '040420', 'name': '정상제이엘에스'},
	 {'code': '215200', 'name': '메가스터디교육'},
	 {'code': '072870', 'name': '메가스터디'},
	 {'code': '096240', 'name': '크레버스'},
	 {'code': '215100', 'name': '로보로보'}],
    '출판': [{'code': '263720', 'name': '디앤씨미디어'}],   '전문소매': [{'code': '381970', 'name': '케이카'},
	 {'code': '071840', 'name': '롯데하이마트'},
	 {'code': '067990', 'name': '도이치모터스'}],
    '해운사': [{'code': '003280', 'name': '흥아해운'},
	 {'code': '028670', 'name': '팬오션'},
	 {'code': '124560', 'name': '태웅로직스'},
	 {'code': '067900', 'name': '와이엔텍'},
	 {'code': '005880', 'name': '대한해운'},
	 {'code': '044450', 'name': 'KSS해운'},
	 {'code': '011200', 'name': 'HMM'}],
    '에너지장비및서비스': [{'code': '389260', 'name': '대명에너지'},
	 {'code': '083650', 'name': '비에이치아이'},
	 {'code': '270520', 'name': '지엔원에너지'},
	 {'code': '126720', 'name': '수산인더스트리'},
	 {'code': '041590', 'name': '플래스크'},
	 {'code': '112610', 'name': '씨에스윈드'},
	 {'code': '322000', 'name': '현대에너지솔루션'},
	 {'code': '018000', 'name': '유니슨'},
	 {'code': '137950', 'name': '제이씨케미칼'},
	 {'code': '046120', 'name': '오르비텍'},
	 {'code': '001390', 'name': 'KG케미칼'},
	 {'code': '099220', 'name': 'SDN'},
	 {'code': '005090', 'name': 'SGC에너지'},
	 {'code': '060900', 'name': '대한그린파워'},
	 {'code': '044490', 'name': '태웅'}],
    '건축제품': [{'code': '018310', 'name': '삼목에스폼'},
	 {'code': '090410', 'name': '덕신하우징'},
	 {'code': '014280', 'name': '금강공업'}],
    '건강관리장비와용품': [{'code': '214150', 'name': '클래시스'},
	 {'code': '085370', 'name': '루트로닉'},
	 {'code': '336570', 'name': '원텍'},
	 {'code': '054950', 'name': '제이브이엠'},
	 {'code': '228670', 'name': '레이'},
	 {'code': '048260', 'name': '오스템임플란트'},
	 {'code': '294090', 'name': '이오플로우'},
	 {'code': '256840', 'name': '한국비엔씨'},
	 {'code': '228850', 'name': '레이언스'},
	 {'code': '048870', 'name': '시너지이노베이션'},
	 {'code': '179290', 'name': '엠아이텍'},
	 {'code': '042520', 'name': '한스바이오메드'},
	 {'code': '335890', 'name': '비올'},
	 {'code': '261200', 'name': '덴티스'},
	 {'code': '145720', 'name': '덴티움'},
	 {'code': '253840', 'name': '수젠텍'},
	 {'code': '214610', 'name': '미코바이오메드'},
	 {'code': '258830', 'name': '세종메디칼'},
	 {'code': '137310', 'name': '에스디바이오센서'},
	 {'code': '119610', 'name': '인터로조'},
	 {'code': '041830', 'name': '인바디'},
	 {'code': '372910', 'name': '한컴라이프케어'},
	 {'code': '228760', 'name': '지노믹트리'},
	 {'code': '099190', 'name': '아이센스'},
	 {'code': '340570', 'name': '티앤엘'},
	 {'code': '150840', 'name': '인트로메딕'},
	 {'code': '142280', 'name': '녹십자엠에스'},
	 {'code': '263690', 'name': '디알젬'},
	 {'code': '314930', 'name': '바이오다인'},
	 {'code': '057880', 'name': '피에이치씨'},
	 {'code': '004080', 'name': '신흥'},
	 {'code': '043150', 'name': '바텍'},
	 {'code': '100120', 'name': '뷰웍스'},
	 {'code': '100700', 'name': '세운메디칼'},
	 {'code': '104540', 'name': '코렌텍'},
	 {'code': '108860', 'name': '셀바스AI'},
	 {'code': '216080', 'name': '제테마'},
	 {'code': '065510', 'name': '휴비츠'},
	 {'code': '039840', 'name': '디오'},
	 {'code': '122310', 'name': '제노레이'},
	 {'code': '290650', 'name': '엘앤씨바이오'},
	 {'code': '405000', 'name': '플라즈맵'},
	 {'code': '138610', 'name': '나이벡'},
	 {'code': '156100', 'name': '엘앤케이바이오'},
	 {'code': '304840', 'name': '피플바이오'}],
    '식품': [{'code': '016790', 'name': '카나리아바이오'},
	 {'code': '271560', 'name': '오리온'},
	 {'code': '002140', 'name': '고려산업'},
	 {'code': '027710', 'name': '팜스토리'},
	 {'code': '004370', 'name': '농심'},
	 {'code': '005860', 'name': '한일사료'},
	 {'code': '005180', 'name': '빙그레'},
	 {'code': '017810', 'name': '풀무원'},
	 {'code': '004970', 'name': '신라교역'},
	 {'code': '267980', 'name': '매일유업'},
	 {'code': '003380', 'name': '하림지주'},
	 {'code': '073560', 'name': '우리손에프앤지'},
	 {'code': '097950', 'name': 'CJ제일제당'},
	 {'code': '248170', 'name': '샘표식품'},
	 {'code': '353810', 'name': '이지바이오'},
	 {'code': '339770', 'name': '교촌에프앤비'},
	 {'code': '003960', 'name': '사조대림'},
	 {'code': '280360', 'name': '롯데제과'},
	 {'code': '001800', 'name': '오리온홀딩스'},
	 {'code': '001790', 'name': '대한제당'},
	 {'code': '136480', 'name': '하림'},
	 {'code': '005990', 'name': '매일홀딩스'},
	 {'code': '035810', 'name': '이지홀딩스'},
	 {'code': '264900', 'name': '크라운제과'},
	 {'code': '007310', 'name': '오뚜기'},
	 {'code': '007540', 'name': '샘표'},
	 {'code': '004990', 'name': '롯데지주'},
	 {'code': '003920', 'name': '남양유업'},
	 {'code': '145990', 'name': '삼양사'},
	 {'code': '005610', 'name': 'SPC삼립'},
	 {'code': '097955', 'name': 'CJ제일제당 우'},
	 {'code': '002600', 'name': '조흥'},
	 {'code': '072710', 'name': '농심홀딩스'},
	 {'code': '036580', 'name': '팜스코'},
	 {'code': '290720', 'name': '푸드나무'},
	 {'code': '001680', 'name': '대상'},
	 {'code': '003230', 'name': '삼양식품'},
	 {'code': '007160', 'name': '사조산업'},
	 {'code': '101530', 'name': '해태제과식품'},
	 {'code': '136490', 'name': '선진'},
	 {'code': '000070', 'name': '삼양홀딩스'},
	 {'code': '084690', 'name': '대상홀딩스'},
	 {'code': '049770', 'name': '동원F&B'},
	 {'code': '008040', 'name': '사조동아원'},
	 {'code': '026960', 'name': '동서'},
	 {'code': '001130', 'name': '대한제분'},
	 {'code': '006040', 'name': '동원산업'},
	 {'code': '357230', 'name': '에이치피오'},
	 {'code': '003580', 'name': 'HLB글로벌'},
	 {'code': '140410', 'name': '메지온'}],
    '섬유,의류,신발,호화품': [{'code': '014990', 'name': '인디에프'},
	 {'code': '007700', 'name': 'F&F홀딩스'},
	 {'code': '016090', 'name': '대현'},
	 {'code': '352700', 'name': '씨앤투스성진'},
	 {'code': '079980', 'name': '휴비스'},
	 {'code': '298540', 'name': '더네이쳐홀딩스'},
	 {'code': '001070', 'name': '대한방직'},
	 {'code': '298020', 'name': '효성티앤씨'},
	 {'code': '016450', 'name': '한세예스24홀딩스'},
	 {'code': '383220', 'name': 'F&F'},
	 {'code': '093050', 'name': 'LF'},
	 {'code': '002170', 'name': '삼양통상'},
	 {'code': '009970', 'name': '영원무역홀딩스'},
	 {'code': '004700', 'name': '조광피혁'},
	 {'code': '005800', 'name': '신영와코루'},
	 {'code': '003610', 'name': '방림'},
	 {'code': '033340', 'name': '좋은사람들'},
	 {'code': '000680', 'name': 'LS네트웍스'},
	 {'code': '001460', 'name': 'BYC'},
	 {'code': '020000', 'name': '한섬'},
	 {'code': '035150', 'name': '백산'},
	 {'code': '111770', 'name': '영원무역'},
	 {'code': '001530', 'name': 'DI동일'},
	 {'code': '194370', 'name': '제이에스코퍼레이션'},
	 {'code': '006060', 'name': '화승인더'},
	 {'code': '081660', 'name': '휠라홀딩스'},
	 {'code': '000050', 'name': '경방'},
	 {'code': '306040', 'name': '에스제이그룹'},
	 {'code': '366030', 'name': '공구우먼'},
	 {'code': '033290', 'name': '코웰패션'},
	 {'code': '003200', 'name': '일신방직'},
	 {'code': '110790', 'name': '크리스에프앤씨'},
	 {'code': '159580', 'name': '제로투세븐'},
	 {'code': '337930', 'name': '브랜드엑스코퍼레이션'},
	 {'code': '102280', 'name': '쌍방울'},
	 {'code': '241590', 'name': '화승엔터프라이즈'},
	 {'code': '004060', 'name': 'SG세계물산'},
	 {'code': '036620', 'name': '감성코퍼레이션'},
	 {'code': '105630', 'name': '한세실업'},
	 {'code': '005390', 'name': '신성통상'},
	 {'code': '024890', 'name': '대원화성'},
	 {'code': '013990', 'name': '아가방컴퍼니'},
	 {'code': '009270', 'name': '신원'},
	 {'code': '031430', 'name': '신세계인터내셔날'}],
    '식품과기본식료품소매': [{'code': '051500', 'name': 'CJ프레시웨이'},
	 {'code': '051160', 'name': '지어소프트'}],
    '건강관리기술': [{'code': '263700', 'name': '케어랩스'},
	 {'code': '032620', 'name': '유비케어'},
	 {'code': '287410', 'name': '제이시스메디칼'},
	 {'code': '071200', 'name': '인피니트헬스케어'},
	 {'code': '311690', 'name': 'CJ 바이오사이언스'},
	 {'code': '099750', 'name': '이지케어텍'},
	 {'code': '328130', 'name': '루닛'}],
    '음료': [{'code': '005300', 'name': '롯데칠성'},
	 {'code': '276730', 'name': '제주맥주'},
	 {'code': '018120', 'name': '진로발효'},
	 {'code': '000080', 'name': '하이트진로'},
	 {'code': '189980', 'name': '흥국에프엔비'},
	 {'code': '043650', 'name': '국순당'},
	 {'code': '000140', 'name': '하이트진로홀딩스'},
	 {'code': '004650', 'name': '창해에탄올'},
	 {'code': '033920', 'name': '무학'},
	 {'code': '023900', 'name': '풍국주정'}],
    '포장재': [{'code': '011280', 'name': '태림포장'},
	 {'code': '002200', 'name': '한국수출포장'},
	 {'code': '014160', 'name': '대영포장'},
	 {'code': '023600', 'name': '삼보판지'},
	 {'code': '002310', 'name': '아세아제지'},
	 {'code': '115960', 'name': '연우'},
	 {'code': '016590', 'name': '신대양제지'},
	 {'code': '002030', 'name': '아세아'},
	 {'code': '008730', 'name': '율촌화학'},
	 {'code': '115390', 'name': '락앤락'},
	 {'code': '251970', 'name': '펌텍코리아'},
	 {'code': '014820', 'name': '동원시스템즈'},
	 {'code': '272550', 'name': '삼양패키징'},
	 {'code': '033310', 'name': '엠투엔'}],
    '광고': [{'code': '048550', 'name': 'SM C&C'},
	 {'code': '089600', 'name': '나스미디어'},
	 {'code': '030000', 'name': '제일기획'},
	 {'code': '214320', 'name': '이노션'},
	 {'code': '363260', 'name': '모비데이즈'},
	 {'code': '216050', 'name': '인크로스'},
	 {'code': '291230', 'name': '엔피'}],
    '가구': [{'code': '013890', 'name': '지누스'},
	 {'code': '003800', 'name': '에이스침대'},
	 {'code': '009240', 'name': '한샘'},
	 {'code': '016800', 'name': '퍼시스'},
	 {'code': '079430', 'name': '현대리바트'}],
    '기타금융': [{'code': '007330', 'name': '푸른저축은행'},
	 {'code': '204620', 'name': '글로벌텍스프리'},
	 {'code': '012700', 'name': '리드코프'},
	 {'code': '010050', 'name': '우리종금'},
	 {'code': '023760', 'name': '한국캐피탈'}],
    '사무용전자제품': [{'code': '029530', 'name': '신도리코'}],   '카드': [{'code': '029780', 'name': '삼성카드'}],   '담배': [{'code': '033780', 'name': 'KT&G'}],   '기계': [{'code': '114190', 'name': '강원에너지'},
	 {'code': '053590', 'name': '한국테크놀로지'},
	 {'code': '060310', 'name': '3S'},
	 {'code': '074610', 'name': '이엔플러스'},
	 {'code': '064350', 'name': '현대로템'},
	 {'code': '024880', 'name': '케이피에프'},
	 {'code': '011700', 'name': '한신기계'},
	 {'code': '019210', 'name': '와이지-원'},
	 {'code': '007820', 'name': '에스엠코어'},
	 {'code': '073640', 'name': '테라사이언스'},
	 {'code': '013570', 'name': '디와이'},
	 {'code': '053080', 'name': '원방테크'},
	 {'code': '009160', 'name': 'SIMPAC'},
	 {'code': '051490', 'name': '나라엠앤디'},
	 {'code': '241560', 'name': '두산밥캣'},
	 {'code': '210540', 'name': '디와이파워'},
	 {'code': '267270', 'name': '현대건설기계'},
	 {'code': '056730', 'name': 'CNT85'},
	 {'code': '000490', 'name': '대동'},
	 {'code': '007460', 'name': '에이프로젠'},
	 {'code': '267320', 'name': '나인테크'},
	 {'code': '043220', 'name': '티에스넥스젠'},
	 {'code': '109860', 'name': '동일금속'},
	 {'code': '297090', 'name': '씨에스베어링'},
	 {'code': '277880', 'name': '티에스아이'},
	 {'code': '017800', 'name': '현대엘리베이'},
	 {'code': '004380', 'name': '삼익THK'},
	 {'code': '105740', 'name': '디케이락'},
	 {'code': '388720', 'name': '유일로보틱스'},
	 {'code': '282880', 'name': '코윈테크'},
	 {'code': '092440', 'name': '기신정기'},
	 {'code': '034020', 'name': '두산에너빌리티'},
	 {'code': '277810', 'name': '레인보우로보틱스'},
	 {'code': '105840', 'name': '우진'},
	 {'code': '002900', 'name': 'TYM'},
	 {'code': '044060', 'name': '조광ILI'},
	 {'code': '108490', 'name': '로보티즈'},
	 {'code': '023160', 'name': '태광'},
	 {'code': '195990', 'name': '에이비프로바이오'},
	 {'code': '100840', 'name': 'SNT에너지'},
	 {'code': '056190', 'name': '에스에프에이'},
	 {'code': '090360', 'name': '로보스타'},
	 {'code': '140670', 'name': '알에스오토메이션'},
	 {'code': '417970', 'name': '모델솔루션'},
	 {'code': '086670', 'name': '비엠티'},
	 {'code': '014620', 'name': '성광벤드'},
	 {'code': '090710', 'name': '휴림로봇'},
	 {'code': '014200', 'name': '광림'},
	 {'code': '015230', 'name': '대창단조'},
	 {'code': '013030', 'name': '하이록코리아'},
	 {'code': '104460', 'name': '디와이피엔에프'},
	 {'code': '036560', 'name': '영풍정밀'},
	 {'code': '095190', 'name': '이엠코리아'},
	 {'code': '041440', 'name': '현대에버다임'},
	 {'code': '042670', 'name': '현대두산인프라코어'},
	 {'code': '017550', 'name': '수산중공업'},
	 {'code': '159010', 'name': '아스플로'},
	 {'code': '129920', 'name': '대성하이텍'},
	 {'code': '036890', 'name': '진성티이씨'},
	 {'code': '317850', 'name': '대모'},
	 {'code': '389500', 'name': '에스비비테크'},
	 {'code': '348340', 'name': '뉴로메카'}],
    '건설': [{'code': '101670', 'name': '하이드로리튬'},
	 {'code': '016250', 'name': 'SGC이테크건설'},
	 {'code': '003070', 'name': '코오롱글로벌'},
	 {'code': '054930', 'name': '유신'},
	 {'code': '066620', 'name': '국보디자인'},
	 {'code': '097230', 'name': 'HJ중공업'},
	 {'code': '037440', 'name': '희림'},
	 {'code': '060370', 'name': 'KT서브마린'},
	 {'code': '066980', 'name': '이엔코퍼레이션'},
	 {'code': '047040', 'name': '대우건설'},
	 {'code': '001880', 'name': 'DL건설'},
	 {'code': '014790', 'name': 'HL D&I'},
	 {'code': '002410', 'name': '범양건영'},
	 {'code': '011370', 'name': '서한'},
	 {'code': '002460', 'name': '화성산업'},
	 {'code': '045100', 'name': '한양이엔지'},
	 {'code': '013580', 'name': '계룡건설'},
	 {'code': '039570', 'name': 'HDC랩스'},
	 {'code': '009410', 'name': '태영건설'},
	 {'code': '036190', 'name': '금화피에스시'},
	 {'code': '012630', 'name': 'HDC'},
	 {'code': '094820', 'name': '일진파워'},
	 {'code': '002780', 'name': '진흥기업'},
	 {'code': '013120', 'name': '동원개발'},
	 {'code': '002990', 'name': '금호건설'},
	 {'code': '005960', 'name': '동부건설'},
	 {'code': '010780', 'name': '아이에스동서'},
	 {'code': '021320', 'name': 'KCC건설'},
	 {'code': '026150', 'name': '특수건설'},
	 {'code': '091590', 'name': '남화토건'},
	 {'code': '375500', 'name': 'DL이앤씨'},
	 {'code': '000720', 'name': '현대건설'},
	 {'code': '006360', 'name': 'GS건설'},
	 {'code': '004960', 'name': '한신공영'},
	 {'code': '028100', 'name': '동아지질'},
	 {'code': '053690', 'name': '한미글로벌'},
	 {'code': '035890', 'name': '서희건설'},
	 {'code': '049180', 'name': '셀루메드'},
	 {'code': '028050', 'name': '삼성엔지니어링'},
	 {'code': '001470', 'name': '삼부토건'},
	 {'code': '294870', 'name': 'HDC현대산업개발'},
	 {'code': '317400', 'name': '자이에스앤디'},
	 {'code': '025950', 'name': '동신건설'},
	 {'code': '013360', 'name': '일성건설'},
	 {'code': '186230', 'name': '그린플러스'},
	 {'code': '076080', 'name': '웰크론한텍'},
	 {'code': '002150', 'name': '도화엔지니어링'}],
    '전기장비': [{'code': '103590', 'name': '일진전기'},
	 {'code': '298040', 'name': '효성중공업'},
	 {'code': '017040', 'name': '광명전기'},
	 {'code': '199820', 'name': '제일전기공업'},
	 {'code': '033100', 'name': '제룡전기'},
	 {'code': '229640', 'name': 'LS전선아시아'},
	 {'code': '015860', 'name': '일진홀딩스'},
	 {'code': '267260', 'name': '현대일렉트릭'},
	 {'code': '388050', 'name': '지투파워'},
	 {'code': '042370', 'name': '비츠로테크'},
	 {'code': '010120', 'name': 'LS ELECTRIC'},
	 {'code': '382900', 'name': '범한퓨얼셀'},
	 {'code': '006910', 'name': '보성파워텍'},
	 {'code': '001440', 'name': '대한전선'},
	 {'code': '126340', 'name': '비나텍'},
	 {'code': '000500', 'name': '가온전선'},
	 {'code': '006260', 'name': 'LS'},
	 {'code': '010170', 'name': '대한광통신'}],
    '전기제품': [{'code': '079960', 'name': '동양이엔피'},
	 {'code': '273640', 'name': '와이엠텍'},
	 {'code': '373220', 'name': 'LG에너지솔루션'},
	 {'code': '196490', 'name': '디에이테크놀로지'},
	 {'code': '217820', 'name': '엔에스'},
	 {'code': '131390', 'name': '원익피앤이'},
	 {'code': '137400', 'name': '피엔티'},
	 {'code': '393890', 'name': '더블유씨피'},
	 {'code': '006405', 'name': '삼성SDI우'},
	 {'code': '009470', 'name': '삼화전기'},
	 {'code': '288620', 'name': '에스퓨얼셀'},
	 {'code': '005680', 'name': '삼영전자'},
	 {'code': '036010', 'name': '아비코전자'},
	 {'code': '382840', 'name': '원준'},
	 {'code': '377330', 'name': '이지트로닉스'},
	 {'code': '066970', 'name': '엘앤에프'},
	 {'code': '001820', 'name': '삼화콘덴서'},
	 {'code': '290670', 'name': '대보마그네틱'},
	 {'code': '382480', 'name': '지아이텍'},
	 {'code': '082920', 'name': '비츠로셀'},
	 {'code': '259630', 'name': '엠플러스'},
	 {'code': '336260', 'name': '두산퓨얼셀'},
	 {'code': '006400', 'name': '삼성SDI'},
	 {'code': '348370', 'name': '엔켐'},
	 {'code': '033180', 'name': 'KH 필룩스'},
	 {'code': '107600', 'name': '새빗켐'},
	 {'code': '247540', 'name': '에코프로비엠'},
	 {'code': '33626K', 'name': '두산퓨얼셀1우'},
	 {'code': '361610', 'name': 'SK아이이테크놀로지'},
	 {'code': '243840', 'name': '신흥에스이씨'},
	 {'code': '278280', 'name': '천보'},
	 {'code': '365340', 'name': '성일하이텍'},
	 {'code': '302430', 'name': '이노메트리'},
	 {'code': '148930', 'name': '에이치와이티씨'},
	 {'code': '222080', 'name': '씨아이에스'},
	 {'code': '058610', 'name': '에스피지'}],
    '소프트웨어': [{'code': '376300', 'name': '디어유'},
	 {'code': '012510', 'name': '더존비즈온'},
	 {'code': '205100', 'name': '엑셈'},
	 {'code': '301300', 'name': '바이브컴퍼니'},
	 {'code': '058970', 'name': '엠로'},
	 {'code': '276040', 'name': '스코넥'},
	 {'code': '053800', 'name': '안랩'},
	 {'code': '419120', 'name': '산돌'},
	 {'code': '136540', 'name': '윈스'},
	 {'code': '352910', 'name': '오비고'},
	 {'code': '158430', 'name': '아톤'},
	 {'code': '086960', 'name': 'MDS테크'},
	 {'code': '053580', 'name': '웹케시'},
	 {'code': '377030', 'name': '맥스트'},
	 {'code': '150900', 'name': '파수'},
	 {'code': '192250', 'name': '케이사인'},
	 {'code': '054920', 'name': '한컴위드'},
	 {'code': '131370', 'name': '알서포트'},
	 {'code': '402030', 'name': '코난테크놀로지'},
	 {'code': '030520', 'name': '한글과컴퓨터'},
	 {'code': '138580', 'name': '비즈니스온'},
	 {'code': '047560', 'name': '이스트소프트'},
	 {'code': '288980', 'name': '모아데이타'},
	 {'code': '139670', 'name': '키네마스터'},
	 {'code': '347860', 'name': '알체라'}],
    '자동차부품': [{'code': '000430', 'name': '대원강업'},
	 {'code': '010580', 'name': '에스엠벡셀'},
	 {'code': '067570', 'name': '엔브이에이치코리아'},
	 {'code': '033530', 'name': '세종공업'},
	 {'code': '353590', 'name': '오토앤'},
	 {'code': '041930', 'name': '동아화성'},
	 {'code': '265560', 'name': '영화테크'},
	 {'code': '007340', 'name': 'DN오토모티브'},
	 {'code': '025540', 'name': '한국단자'},
	 {'code': '038110', 'name': '에코플라스틱'},
	 {'code': '012860', 'name': '모베이스전자'},
	 {'code': '088290', 'name': '이원컴포텍'},
	 {'code': '043370', 'name': '피에이치에이'},
	 {'code': '009680', 'name': '모토닉'},
	 {'code': '200880', 'name': '서연이화'},
	 {'code': '023000', 'name': '삼원강재'},
	 {'code': '005710', 'name': '대원산업'},
	 {'code': '011320', 'name': '유니크'},
	 {'code': '000300', 'name': '대유플러스'},
	 {'code': '118990', 'name': '모트렉스'},
	 {'code': '038880', 'name': '아이에이'},
	 {'code': '003570', 'name': 'SNT중공업'},
	 {'code': '015750', 'name': '성우하이텍'},
	 {'code': '013310', 'name': '아진산업'},
	 {'code': '271940', 'name': '일진하이솔루스'},
	 {'code': '064960', 'name': 'SNT모티브'},
	 {'code': '005720', 'name': '넥센'},
	 {'code': '000240', 'name': '한국앤컴퍼니'},
	 {'code': '012330', 'name': '현대모비스'},
	 {'code': '036530', 'name': 'SNT홀딩스'},
	 {'code': '060980', 'name': 'HL홀딩스'},
	 {'code': '066590', 'name': '우수AMS'},
	 {'code': '078590', 'name': '디아크'},
	 {'code': '282690', 'name': '동아타이어'},
	 {'code': '163560', 'name': '동일고무벨트'},
	 {'code': '105550', 'name': '트루윈'},
	 {'code': '161390', 'name': '한국타이어앤테크놀로지'},
	 {'code': '089470', 'name': 'HDC현대EP'},
	 {'code': '126600', 'name': '코프라'},
	 {'code': '004490', 'name': '세방전지'},
	 {'code': '308170', 'name': '센트랄모텍'},
	 {'code': '023800', 'name': '인지컨트롤스'},
	 {'code': '122350', 'name': '삼기'},
	 {'code': '007860', 'name': '서연'},
	 {'code': '204320', 'name': 'HL만도'},
	 {'code': '215360', 'name': '우리산업'},
	 {'code': '241690', 'name': '유니테크노'},
	 {'code': '011210', 'name': '현대위아'},
	 {'code': '214330', 'name': '금호에이치티'},
	 {'code': '123040', 'name': '엠에스오토텍'},
	 {'code': '092200', 'name': '디아이씨'},
	 {'code': '128540', 'name': '에코캡'},
	 {'code': '005850', 'name': '에스엘'},
	 {'code': '002350', 'name': '넥센타이어'},
	 {'code': '073240', 'name': '금호타이어'},
	 {'code': '900280', 'name': '골든센츄리'},
	 {'code': '010690', 'name': '화신'},
	 {'code': '018880', 'name': '한온시스템'},
	 {'code': '009900', 'name': '명신산업'},
	 {'code': '047400', 'name': '유니온머티리얼'},
	 {'code': '053700', 'name': '삼보모터스'}],
    '생명과학도구및서비스': [{'code': '096530', 'name': '씨젠'},
	 {'code': '083790', 'name': '크리스탈지노믹스'},
	 {'code': '039860', 'name': '나노엔텍'},
	 {'code': '950130', 'name': '엑세스바이오'},
	 {'code': '241820', 'name': '피씨엘'},
	 {'code': '217600', 'name': '켐온'},
	 {'code': '206640', 'name': '바디텍메드'},
	 {'code': '182400', 'name': '엔케이맥스'},
	 {'code': '180400', 'name': '디엑스앤브이엑스'},
	 {'code': '008490', 'name': '서흥'},
	 {'code': '038290', 'name': '마크로젠'},
	 {'code': '086040', 'name': '바이오톡스텍'},
	 {'code': '354200', 'name': '엔젠바이오'},
	 {'code': '205470', 'name': '휴마시스'},
	 {'code': '278650', 'name': '노터스'},
	 {'code': '141080', 'name': '레고켐바이오'},
	 {'code': '084650', 'name': '랩지노믹스'},
	 {'code': '950200', 'name': '소마젠'},
	 {'code': '048530', 'name': '인트론바이오'},
	 {'code': '245620', 'name': 'EDGC'},
	 {'code': '046210', 'name': '파나진'}],
    '상업서비스와공급품': [{'code': '012750', 'name': '에스원'},
	 {'code': '034950', 'name': '한국기업평가'},
	 {'code': '049720', 'name': '고려신용정보'},
	 {'code': '377450', 'name': '리파인'},
	 {'code': '092130', 'name': '이크레더블'},
	 {'code': '036120', 'name': 'SCI평가정보'},
	 {'code': '094280', 'name': '효성ITX'},
	 {'code': '122900', 'name': '아이마켓코리아'},
	 {'code': '036800', 'name': '나이스정보통신'},
	 {'code': '130580', 'name': '나이스디앤비'},
	 {'code': '034310', 'name': 'NICE'},
	 {'code': '060150', 'name': '인선이엔티'},
	 {'code': '029960', 'name': '코엔텍'},
	 {'code': '090850', 'name': '현대이지웰'},
	 {'code': '143240', 'name': '사람인에이치알'},
	 {'code': '030960', 'name': '양지사'},
	 {'code': '030190', 'name': 'NICE평가정보'}],
    '철강': [{'code': '025550', 'name': '한국선재'},
	 {'code': '001940', 'name': 'KISCO홀딩스'},
	 {'code': '001430', 'name': '세아베스틸지주'},
	 {'code': '001080', 'name': '만호제강'},
	 {'code': '084010', 'name': '대한제강'},
	 {'code': '104700', 'name': '한국철강'},
	 {'code': '002240', 'name': '고려제강'},
	 {'code': '001230', 'name': '동국제강'},
	 {'code': '004890', 'name': '동일산업'},
	 {'code': '007280', 'name': '한국특강'},
	 {'code': '008970', 'name': '동양철관'},
	 {'code': '008260', 'name': 'NI스틸'},
	 {'code': '306200', 'name': '세아제강'},
	 {'code': '003030', 'name': '세아제강지주'},
	 {'code': '053260', 'name': '금강철강'},
	 {'code': '100130', 'name': '동국S&C'},
	 {'code': '139990', 'name': '아주스틸'},
	 {'code': '016380', 'name': 'KG스틸'},
	 {'code': '005490', 'name': 'POSCO홀딩스'},
	 {'code': '005010', 'name': '휴스틸'},
	 {'code': '151860', 'name': 'KG ETS'},
	 {'code': '000970', 'name': '한국주철관'},
	 {'code': '019440', 'name': '세아특수강'},
	 {'code': '120030', 'name': '조선선재'},
	 {'code': '004020', 'name': '현대제철'},
	 {'code': '058650', 'name': '세아홀딩스'},
	 {'code': '002710', 'name': 'TCC스틸'},
	 {'code': '009520', 'name': '포스코엠텍'},
	 {'code': '005160', 'name': '동국산업'}],
    '건축자재': [{'code': '109610', 'name': '에스와이'},
	 {'code': '058730', 'name': '다스코'},
	 {'code': '003300', 'name': '한일홀딩스'},
	 {'code': '060560', 'name': '홈센타홀딩스'},
	 {'code': '090350', 'name': '노루페인트'},
	 {'code': '003410', 'name': '쌍용C&E'},
	 {'code': '225530', 'name': '보광산업'},
	 {'code': '108670', 'name': 'LX하우시스'},
	 {'code': '344820', 'name': 'KCC글라스'},
	 {'code': '007210', 'name': '벽산'},
	 {'code': '006390', 'name': '한일현대시멘트'},
	 {'code': '000390', 'name': '삼화페인트'},
	 {'code': '300720', 'name': '한일시멘트'},
	 {'code': '000860', 'name': '강남제비스코'},
	 {'code': '004980', 'name': '성신양회'},
	 {'code': '001520', 'name': '동양'},
	 {'code': '183190', 'name': '아세아시멘트'},
	 {'code': '023410', 'name': '유진기업'},
	 {'code': '025900', 'name': '동화기업'},
	 {'code': '038500', 'name': '삼표시멘트'},
	 {'code': '002380', 'name': 'KCC'},
	 {'code': '171120', 'name': '라이온켐텍'},
	 {'code': '004910', 'name': '조광페인트'},
	 {'code': '000320', 'name': '노루홀딩스'}],
    '디스플레이장비및부품': [{'code': '171090', 'name': '선익시스템'},
	 {'code': '095500', 'name': '미래나노텍'},
	 {'code': '141000', 'name': '비아트론'},
	 {'code': '108230', 'name': '톱텍'},
	 {'code': '090470', 'name': '제이스텍'},
	 {'code': '256630', 'name': '포인트엔지니어링'},
	 {'code': '290090', 'name': '트윔'},
	 {'code': '149950', 'name': '아바텍'},
	 {'code': '123860', 'name': '아나패스'},
	 {'code': '187870', 'name': '디바이스이엔지'},
	 {'code': '083930', 'name': '아바코'},
	 {'code': '155650', 'name': '와이엠씨'},
	 {'code': '011690', 'name': '와이투솔루션'},
	 {'code': '052420', 'name': '오성첨단소재'},
	 {'code': '051360', 'name': '토비스'},
	 {'code': '109740', 'name': '디에스케이'},
	 {'code': '213420', 'name': '덕산네오룩스'},
	 {'code': '082850', 'name': '우리바이오'},
	 {'code': '110990', 'name': '디아이티'},
	 {'code': '371950', 'name': '풍원정밀'},
	 {'code': '068790', 'name': 'DMS'},
	 {'code': '004710', 'name': '한솔테크닉스'},
	 {'code': '255440', 'name': '야스'},
	 {'code': '040910', 'name': '아이씨디'},
	 {'code': '265520', 'name': 'AP시스템'},
	 {'code': '108320', 'name': 'LX세미콘'},
	 {'code': '256940', 'name': '케이피에스'},
	 {'code': '046890', 'name': '서울반도체'},
	 {'code': '078150', 'name': 'HB테크놀러지'},
	 {'code': '272290', 'name': '이녹스첨단소재'},
	 {'code': '054620', 'name': 'APS홀딩스'},
	 {'code': '317330', 'name': '덕산테코피아'},
	 {'code': '049950', 'name': '미래컴퍼니'},
	 {'code': '056700', 'name': '신화인터텍'},
	 {'code': '079810', 'name': '디이엔티'},
	 {'code': '297890', 'name': 'HB솔루션'},
	 {'code': '036830', 'name': '솔브레인홀딩스'},
	 {'code': '092190', 'name': '서울바이오시스'}],
    '증권': [{'code': '001750', 'name': '한양증권'},
	 {'code': '071055', 'name': '한국금융지주우'},
	 {'code': '003460', 'name': '유화증권'},
	 {'code': '071050', 'name': '한국금융지주'},
	 {'code': '023590', 'name': '다우기술'},
	 {'code': '00680K', 'name': '미래에셋증권2우B'},
	 {'code': '078020', 'name': '이베스트투자증권'},
	 {'code': '005940', 'name': 'NH투자증권'},
	 {'code': '003547', 'name': '대신증권2우B'},
	 {'code': '003540', 'name': '대신증권'},
	 {'code': '001200', 'name': '유진투자증권'},
	 {'code': '030210', 'name': '다올투자증권'},
	 {'code': '030610', 'name': '교보증권'},
	 {'code': '001725', 'name': '신영증권우'},
	 {'code': '039490', 'name': '키움증권'},
	 {'code': '032190', 'name': '다우데이타'},
	 {'code': '001510', 'name': 'SK증권'},
	 {'code': '001500', 'name': '현대차증권'},
	 {'code': '001720', 'name': '신영증권'},
	 {'code': '016610', 'name': 'DB금융투자'},
	 {'code': '001270', 'name': '부국증권'},
	 {'code': '003470', 'name': '유안타증권'},
	 {'code': '016360', 'name': '삼성증권'},
	 {'code': '005945', 'name': 'NH투자증권우'},
	 {'code': '003545', 'name': '대신증권우'},
	 {'code': '006800', 'name': '미래에셋증권'},
	 {'code': '138040', 'name': '메리츠금융지주'},
	 {'code': '003530', 'name': '한화투자증권'},
	 {'code': '008560', 'name': '메리츠증권'}],
    '생물공학': [{'code': '086900', 'name': '메디톡스'},
	 {'code': '145020', 'name': '휴젤'},
	 {'code': '191420', 'name': '테고사이언스'},
	 {'code': '038070', 'name': '서린바이오'},
	 {'code': '067370', 'name': '선바이오'},
	 {'code': '217730', 'name': '강스템바이오텍'},
	 {'code': '087010', 'name': '펩트론'},
	 {'code': '049960', 'name': '쎌바이오텍'},
	 {'code': '064550', 'name': '바이오니아'},
	 {'code': '298380', 'name': '에이비엘바이오'},
	 {'code': '251120', 'name': '바이오에프디엔씨'},
	 {'code': '199800', 'name': '툴젠'},
	 {'code': '217330', 'name': '싸이토젠'},
	 {'code': '054050', 'name': '농우바이오'},
	 {'code': '166480', 'name': '코아스템'},
	 {'code': '078160', 'name': '메디포스트'},
	 {'code': '084990', 'name': '헬릭스미스'},
	 {'code': '011000', 'name': '진원생명과학'},
	 {'code': '039200', 'name': '오스코텍'},
	 {'code': '007390', 'name': '네이처셀'},
	 {'code': '095700', 'name': '제넥신'},
	 {'code': '085660', 'name': '차바이오텍'},
	 {'code': '299660', 'name': '셀리드'},
	 {'code': '196170', 'name': '알테오젠'},
	 {'code': '115180', 'name': '큐리언트'},
	 {'code': '185490', 'name': '아이진'},
	 {'code': '246710', 'name': '티앤알바이오팹'},
	 {'code': '142760', 'name': '비엘'},
	 {'code': '226950', 'name': '올릭스'},
	 {'code': '214370', 'name': '케어젠'},
	 {'code': '187420', 'name': '제노포커스'},
	 {'code': '215600', 'name': '신라젠'},
	 {'code': '092040', 'name': '아미코젠'},
	 {'code': '348150', 'name': '고바이오랩'},
	 {'code': '206650', 'name': '유바이오로직스'},
	 {'code': '174900', 'name': '앱클론'},
	 {'code': '352770', 'name': '클리노믹스'},
	 {'code': '268600', 'name': '셀리버리'},
	 {'code': '263050', 'name': '유틸렉스'}],
    '컴퓨터와주변기기': [{'code': '054800', 'name': '아이디스홀딩스'},
	 {'code': '093190', 'name': '빅솔론'},
	 {'code': '049550', 'name': '잉크테크'}],
    '게임엔터테인먼트': [{'code': '192080', 'name': '더블유게임즈'},
	 {'code': '201490', 'name': '미투온'},
	 {'code': '101730', 'name': '위메이드맥스'},
	 {'code': '067000', 'name': '조이시티'},
	 {'code': '348030', 'name': '모비릭스'},
	 {'code': '123420', 'name': '위메이드플레이'},
	 {'code': '207760', 'name': '미스터블루'},
	 {'code': '251270', 'name': '넷마블'},
	 {'code': '950190', 'name': '미투젠'},
	 {'code': '112040', 'name': '위메이드'},
	 {'code': '095660', 'name': '네오위즈'},
	 {'code': '217270', 'name': '넵튠'},
	 {'code': '205500', 'name': '액션스퀘어'},
	 {'code': '215000', 'name': '골프존'},
	 {'code': '036570', 'name': '엔씨소프트'},
	 {'code': '208640', 'name': '썸에이지'},
	 {'code': '293490', 'name': '카카오게임즈'},
	 {'code': '069080', 'name': '웹젠'},
	 {'code': '259960', 'name': '크래프톤'},
	 {'code': '078340', 'name': '컴투스'},
	 {'code': '194480', 'name': '데브시스터즈'},
	 {'code': '058630', 'name': '엠게임'},
	 {'code': '063080', 'name': '컴투스홀딩스'},
	 {'code': '042420', 'name': '네오위즈홀딩스'},
	 {'code': '225570', 'name': '넥슨게임즈'},
	 {'code': '263750', 'name': '펄어비스'}],
    'IT서비스': [{'code': '173130', 'name': '오파스넷'},
	 {'code': '045390', 'name': '대아티아이'},
	 {'code': '267850', 'name': '아시아나IDT'},
	 {'code': '163730', 'name': '핑거'},
	 {'code': '376980', 'name': '원티드랩'},
	 {'code': '181710', 'name': 'NHN'},
	 {'code': '053300', 'name': '한국정보인증'},
	 {'code': '307950', 'name': '현대오토에버'},
	 {'code': '018260', 'name': '삼성에스디에스'},
	 {'code': '012030', 'name': 'DB'},
	 {'code': '234300', 'name': '에스트래픽'},
	 {'code': '286940', 'name': '롯데정보통신'},
	 {'code': '214180', 'name': '헥토이노베이션'},
	 {'code': '234340', 'name': '헥토파이낸셜'},
	 {'code': '046440', 'name': 'KG모빌리언스'},
	 {'code': '022100', 'name': '포스코 ICT'},
	 {'code': '063570', 'name': '한국전자금융'},
	 {'code': '093320', 'name': '케이아이엔엑스'},
	 {'code': '294570', 'name': '쿠콘'},
	 {'code': '064260', 'name': '다날'},
	 {'code': '079940', 'name': '가비아'},
	 {'code': '042000', 'name': '카페24'},
	 {'code': '052400', 'name': '코나아이'},
	 {'code': '035510', 'name': '신세계 I&C'},
	 {'code': '035600', 'name': 'KG이니시스'},
	 {'code': '377300', 'name': '카카오페이'},
	 {'code': '203650', 'name': '드림시큐리티'},
	 {'code': '094480', 'name': '갤럭시아머니트리'},
	 {'code': '060250', 'name': 'NHN한국사이버결제'},
	 {'code': '391710', 'name': '코닉오토메이션'}],
    '가정용기기와용품': [{'code': '044340', 'name': '위닉스'},
	 {'code': '002700', 'name': '신일전자'},
	 {'code': '284740', 'name': '쿠쿠홈시스'},
	 {'code': '005440', 'name': '현대그린푸드'},
	 {'code': '056080', 'name': '유진로봇'},
	 {'code': '014470', 'name': '부방'},
	 {'code': '192400', 'name': '쿠쿠홀딩스'},
	 {'code': '037070', 'name': '파세코'},
	 {'code': '009450', 'name': '경동나비엔'},
	 {'code': '004250', 'name': 'NPC'},
	 {'code': '065350', 'name': '신성델타테크'},
	 {'code': '270660', 'name': '에브리봇'},
	 {'code': '021240', 'name': '코웨이'},
	 {'code': '042600', 'name': '새로닉스'}],
    '핸드셋': [{'code': '083470', 'name': '이엠앤아이'},
	 {'code': '373200', 'name': '하인크코리아'},
	 {'code': '052710', 'name': '아모텍'},
	 {'code': '065680', 'name': '우주일렉트로'},
	 {'code': '357580', 'name': '아모센스'},
	 {'code': '290550', 'name': '디케이티'},
	 {'code': '122990', 'name': '와이솔'},
	 {'code': '091580', 'name': '상신이디피'},
	 {'code': '025320', 'name': '시노펙스'},
	 {'code': '061040', 'name': '알에프텍'},
	 {'code': '091120', 'name': '이엠텍'},
	 {'code': '192650', 'name': '드림텍'},
	 {'code': '060720', 'name': 'KH바텍'},
	 {'code': '148150', 'name': '세경하이테크'},
	 {'code': '091700', 'name': '파트론'},
	 {'code': '047310', 'name': '파워로직스'},
	 {'code': '332570', 'name': '와이팜'},
	 {'code': '179900', 'name': '유티아이'},
	 {'code': '093920', 'name': '서원인텍'},
	 {'code': '285490', 'name': '노바텍'},
	 {'code': '211270', 'name': 'AP위성'},
	 {'code': '190510', 'name': '나무가'},
	 {'code': '050110', 'name': '캠시스'},
	 {'code': '192440', 'name': '슈피겐코리아'},
	 {'code': '094170', 'name': '동운아나텍'},
	 {'code': '263600', 'name': '덕우전자'},
	 {'code': '097520', 'name': '엠씨넥스'},
	 {'code': '049070', 'name': '인탑스'},
	 {'code': '238090', 'name': '앤디포스'},
	 {'code': '045970', 'name': '코아시아'},
	 {'code': '441270', 'name': '파인엠텍'},
	 {'code': '000670', 'name': '영풍'},
	 {'code': '151910', 'name': 'SBW생명과학'},
	 {'code': '126700', 'name': '하이비젼시스템'},
	 {'code': '054210', 'name': '이랜텍'},
	 {'code': '066410', 'name': '버킷스튜디오'}],
    '방송과엔터테인먼트': [{'code': '182360', 'name': '큐브엔터'},
	 {'code': '079160', 'name': 'CJ CGV'},
	 {'code': '063440', 'name': 'SM Life Design'},
	 {'code': '037270', 'name': 'YG PLUS'},
	 {'code': '322780', 'name': '코퍼스코리아'},
	 {'code': '035900', 'name': 'JYP Ent.'},
	 {'code': '037560', 'name': 'LG헬로비전'},
	 {'code': '060570', 'name': '드림어스컴퍼니'},
	 {'code': '036420', 'name': '콘텐트리중앙'},
	 {'code': '046390', 'name': '삼화네트웍스'},
	 {'code': '086980', 'name': '쇼박스'},
	 {'code': '043610', 'name': '지니뮤직'},
	 {'code': '053210', 'name': '스카이라이프'},
	 {'code': '122450', 'name': 'KX'},
	 {'code': '058400', 'name': 'KNN'},
	 {'code': '200350', 'name': '래몽래인'},
	 {'code': '003560', 'name': 'IHQ'},
	 {'code': '040300', 'name': 'YTN'},
	 {'code': '033830', 'name': '티비씨'},
	 {'code': '034120', 'name': 'SBS'},
	 {'code': '160550', 'name': 'NEW'},
	 {'code': '041510', 'name': '에스엠'},
	 {'code': '122870', 'name': '와이지엔터테인먼트'},
	 {'code': '363280', 'name': '티와이홀딩스'},
	 {'code': '206560', 'name': '덱스터'},
	 {'code': '046140', 'name': 'SBS콘텐츠허브'},
	 {'code': '068050', 'name': '팬엔터테인먼트'},
	 {'code': '253450', 'name': '스튜디오드래곤'},
	 {'code': '054780', 'name': '키이스트'},
	 {'code': '389140', 'name': '포바이포'},
	 {'code': '048910', 'name': '대원미디어'},
	 {'code': '299900', 'name': '위지윅스튜디오'},
	 {'code': '241840', 'name': '에이스토리'},
	 {'code': '361570', 'name': '알비더블유'},
	 {'code': '047820', 'name': '초록뱀미디어'},
	 {'code': '352820', 'name': '하이브'},
	 {'code': '039340', 'name': '한국경제TV'},
	 {'code': '035760', 'name': 'CJ ENM'},
	 {'code': '310200', 'name': '애니플러스'}],
    '전자제품': [{'code': '087260', 'name': '모바일어플라이언스'},
	 {'code': '084730', 'name': '팅크웨어'},
	 {'code': '078890', 'name': '가온미디어'},
	 {'code': '066575', 'name': 'LG전자우'},
	 {'code': '115160', 'name': '휴맥스'},
	 {'code': '066570', 'name': 'LG전자'},
	 {'code': '008700', 'name': '아남전자'},
	 {'code': '064240', 'name': '홈캐스트'}],
    '창업투자': [{'code': '307930', 'name': '컴퍼니케이'},
	 {'code': '380440', 'name': '엔에이치스팩19호'},
	 {'code': '021080', 'name': '에이티넘인베스트'},
	 {'code': '019550', 'name': 'SBI인베스트먼트'},
	 {'code': '027830', 'name': '대성창투'},
	 {'code': '289080', 'name': 'SV인베스트먼트'},
	 {'code': '100790', 'name': '미래에셋벤처투자'},
	 {'code': '027360', 'name': '아주IB투자'},
	 {'code': '241520', 'name': 'DSC인베스트먼트'},
	 {'code': '026890', 'name': '스틱인베스트먼트'},
	 {'code': '041190', 'name': '우리기술투자'},
	 {'code': '298870', 'name': '다올인베스트먼트'}],
    '전자장비와기기': [{'code': '360070', 'name': '탑머티리얼'},
	 {'code': '085670', 'name': '뉴프렉스'},
	 {'code': '032820', 'name': '우리기술'},
	 {'code': '093520', 'name': '매커스'},
	 {'code': '143160', 'name': '아이디스'},
	 {'code': '098460', 'name': '고영'},
	 {'code': '204270', 'name': '제이앤티씨'},
	 {'code': '336370', 'name': '솔루스첨단소재'},
	 {'code': '033240', 'name': '자화전자'},
	 {'code': '225190', 'name': '삼양옵틱스'},
	 {'code': '017900', 'name': '광전자'},
	 {'code': '009155', 'name': '삼성전기우'},
	 {'code': '318020', 'name': '포인트모바일'},
	 {'code': '008060', 'name': '대덕'},
	 {'code': '052020', 'name': '에스티큐브'},
	 {'code': '347890', 'name': '엠투아이'},
	 {'code': '161580', 'name': '필옵틱스'},
	 {'code': '236200', 'name': '슈프리마'},
	 {'code': '348350', 'name': '위드텍'},
	 {'code': '007810', 'name': '코리아써키트'},
	 {'code': '248070', 'name': '솔루엠'},
	 {'code': '090460', 'name': '비에이치'},
	 {'code': '370090', 'name': '퓨런티어'},
	 {'code': '051370', 'name': '인터플렉스'},
	 {'code': '009150', 'name': '삼성전기'},
	 {'code': '299030', 'name': '하나기술'},
	 {'code': '011070', 'name': 'LG이노텍'},
	 {'code': '031330', 'name': '에스에이엠티'},
	 {'code': '078600', 'name': '대주전자재료'},
	 {'code': '096040', 'name': '이트론'},
	 {'code': '080420', 'name': '모다이노칩'},
	 {'code': '333620', 'name': '엔시스'},
	 {'code': '068240', 'name': '다원시스'},
	 {'code': '007660', 'name': '이수페타시스'},
	 {'code': '262260', 'name': '에이프로'},
	 {'code': '084850', 'name': '아이티엠반도체'},
	 {'code': '089980', 'name': '상아프론테크'},
	 {'code': '020150', 'name': '일진머티리얼즈'},
	 {'code': '340930', 'name': '유일에너테크'},
	 {'code': '008110', 'name': '대동전자'},
	 {'code': '353200', 'name': '대덕전자'},
	 {'code': '140860', 'name': '파크시스템스'},
	 {'code': '036710', 'name': '심텍홀딩스'},
	 {'code': '222800', 'name': '심텍'},
	 {'code': '368600', 'name': '아이씨에이치'},
	 {'code': '125210', 'name': '아모그린텍'}],
    '복합유틸리티': [{'code': '071320', 'name': '지역난방공사'}],   '인터넷과카탈로그소매': [{'code': '069920', 'name': '아이에스이커머스'},
	 {'code': '036030', 'name': '케이티알파'},
	 {'code': '057050', 'name': '현대홈쇼핑'},
	 {'code': '053280', 'name': '예스24'},
	 {'code': '119860', 'name': '다나와'},
	 {'code': '035080', 'name': '그래디언트'},
	 {'code': '230360', 'name': '에코마케팅'},
	 {'code': '290510', 'name': '코리아센터'},
	 {'code': '257720', 'name': '실리콘투'},
	 {'code': '362320', 'name': '청담글로벌'}],
    '다각화된소비자서비스': [], '판매업체': [{'code': '015540', 'name': '쎌마테라퓨틱스'},
	 {'code': '102370', 'name': '케이옥션'},
	 {'code': '060280', 'name': '큐렉소'},
	 {'code': '043090', 'name': '엑서지21'},
	 {'code': '063170', 'name': '서울옥션'},
	 {'code': '950160', 'name': '코오롱티슈진'}],
    '조선': [{'code': '100090', 'name': '삼강엠앤티'},
	 {'code': '064820', 'name': '케이프'},
	 {'code': '077970', 'name': 'STX엔진'},
	 {'code': '101930', 'name': '인화정공'},
	 {'code': '082740', 'name': 'HSD엔진'},
	 {'code': '010140', 'name': '삼성중공업'},
	 {'code': '071970', 'name': 'STX중공업'},
	 {'code': '009540', 'name': '한국조선해양'},
	 {'code': '042660', 'name': '대우조선해양'},
	 {'code': '108380', 'name': '대양전기공업'},
	 {'code': '014940', 'name': '오리엔탈정공'},
	 {'code': '010620', 'name': '현대미포조선'},
	 {'code': '333430', 'name': '일승'},
	 {'code': '017960', 'name': '한국카본'},
	 {'code': '329180', 'name': '현대중공업'},
	 {'code': '075580', 'name': '세진중공업'}],
    '통신장비': [{'code': '078070', 'name': '유비쿼스홀딩스'},
	 {'code': '050890', 'name': '쏠리드'},
	 {'code': '109070', 'name': '컨버즈'},
	 {'code': '037460', 'name': '삼지전자'},
	 {'code': '264450', 'name': '유비쿼스'},
	 {'code': '200230', 'name': '텔콘RF제약'},
	 {'code': '029480', 'name': '광무'},
	 {'code': '138080', 'name': '오이솔루션'},
	 {'code': '214870', 'name': '뉴지랩파마'},
	 {'code': '218410', 'name': 'RFHIC'},
	 {'code': '178320', 'name': '서진시스템'},
	 {'code': '039560', 'name': '다산네트웍스'},
	 {'code': '230240', 'name': '에치에프알'},
	 {'code': '192410', 'name': '휴림네트웍스'},
	 {'code': '032500', 'name': '케이엠더블유'},
	 {'code': '189300', 'name': '인텔리안테크'},
	 {'code': '088800', 'name': '에이스테크'},
	 {'code': '073490', 'name': '이노와이어리스'}],
    '전기유틸리티': [{'code': '051600', 'name': '한전KPS'},
	 {'code': '130660', 'name': '한전산업'},
	 {'code': '052690', 'name': '한전기술'},
	 {'code': '015760', 'name': '한국전력'}]}
  

kscsv = os.path.join(os.path.dirname(__file__), 'kospi-1.csv')
kqcsv = os.path.join(os.path.dirname(__file__), 'kosdaq-1.csv')
unemploycsv = os.path.join(os.path.dirname(__file__), 'unemploy.csv')

class Backtest:
    now = '0000-00-00'
    result_data = pd.DataFrame()
    stock_bond = []
    nn = 0
    MDD_return = []
    DD_return = [] 
    new_w = pd.Series()
    risk = 0
    draw_start = 0
    finish_early = False
    period_num = 0

    def __init__(self, stocks, today, period=30, stock_bond=[0.6,0.4], input_rebal_period='week', user_w=0, user_input_sb=[], user_input_s=[], risk=0):
        self.PrintInfo = self.PrintInfo
        Backtest.now = today[0]
        Backtest.nn = len(stocks)
        self.stocks = stocks
        self.today = today
        self.period = period
        self.input_rebal_period = input_rebal_period
        self.user_w = user_w
        Backtest.user_input_sb = user_input_sb
        Backtest.user_input_s = user_input_s
        Backtest.stock_bond = stock_bond
        Backtest.risk = risk

    def addDate(self, date, r):    
        return (datetime.datetime.strptime(date, '%Y-%m-%d') + timedelta(days=r)).strftime('%Y-%m-%d')
    # __call__ 에서 안쓰면 cummax, drawdown 삭제
    def cummax(self, nums):
        cum = []
        n_max = 0
        for x in nums:
            if x > n_max:
                n_max = x
            cum.append(n_max)
        return cum
    class PrintInfo(bt.Algo):

        def __init__(self, fmt_string="{name} {now}"):
            super().__init__()
            self.fmt_string = fmt_string

        def addDate(self, date, r):
            return (datetime.datetime.strptime(date, '%Y-%m-%d') + timedelta(days=r)).strftime('%Y-%m-%d')

        def __call__(self, target):
            #print("1 ",Backtest.result_data.index.size)
            Backtest.result_data.loc[self.addDate(Backtest.now,1),target.__dict__['name']] = target.__dict__['_price']
            Backtest.now = str(target.__dict__['now'])[0:10]
            return True

    class WeighSpecified(bt.Algo):

        def __init__(self, weight):
            super().__init__()
            self.weight = weight

        def cummax(self, nums):
            cum = []
            n_max = 0
            for x in nums:
                if x > n_max:
                    n_max = x
                cum.append(n_max)
            return cum
        
        def drawdown(self):
            close_list = Backtest.result_data['portfolio 2'].to_list()[Backtest.draw_start:]
            drawdown = [x-y for x, y in zip(close_list, self.cummax(close_list))]
            Backtest.DD_return = [x/y * 100 for x, y in zip(drawdown, self.cummax(close_list))]
            idx_lower = drawdown.index(min(drawdown))
            idx_upper = close_list.index(max(close_list[:idx_lower+1]))
            mdd = (close_list[idx_lower] - close_list[idx_upper])/close_list[idx_upper]
            Backtest.MDD_return.append(mdd)
            
            Backtest.draw_start = len(Backtest.result_data.columns) - 1

        def __call__(self, target):
            if Backtest.finish_early:
                return True
            #print("target")
            self.drawdown()
            # added copy to make sure these are not overwritten
            #print("2 ", Backtest.result_data.index.size)
            if Backtest.DD_return[-1] < Backtest.risk:
                if Backtest.stock_bond[0] - 0.05 <= 0:
                    finish_early = True
                    target.temp["weights"] = Backtest.new_w.to_dict()
                    return True
                
                Backtest.stock_bond[0] -= 0.05
                Backtest.stock_bond[1] += 0.05
                
                Backtest.new_w[:Backtest.nn] = (np.array(Backtest.user_input_s)*Backtest.stock_bond[0]).tolist()
                Backtest.new_w[Backtest.nn:] = (np.array(Backtest.user_input_s)*Backtest.stock_bond[1]).tolist()   
            target.temp["weights"] = Backtest.new_w.to_dict()

            return True

    def __call__(self):
        log = bt.AlgoStack(
                bt.algos.RunDaily(),
                self.PrintInfo('{name}:{now}. Value:{_value:0.0f}, Price:{_price:0.4f}'),
                bt.algos.PrintRisk()
                )
        
        # Data
        KOSPI = pd.read_csv(kscsv,
                            parse_dates=['Unnamed: 0'],
                            index_col=0)
        KOSPI.index = pd.to_datetime(KOSPI.index.astype(str), format='%Y-%m-%d')
        KOSDAQ = pd.read_csv(kqcsv,
                            parse_dates=['Unnamed: 0'],
                            index_col=0)
        KOSDAQ.index = pd.to_datetime(KOSDAQ.index.astype(str), format='%Y-%m-%d')

        df = pd.concat([KOSPI,KOSDAQ],axis=1)
        df = df.fillna(0)
        
        unemploy = pd.read_csv(unemploycsv,
                               index_col=0,
                               encoding='cp949')
        unemploy.dropna(inplace=True)
        unemploy.columns = list(map(lambda x : f'{x[0:4]}-{x[4:6]}' , unemploy.columns))
        unemploy.index = ['unemploy']
        unemploy = unemploy.T

        exchange = yf.download('USDKRW=X', start='2015-01-01', end='2022-07-15')['Close']
        tlt = yf.download('TLT', start = '2015-01-01', end = '2022-07-15')['Close']

        unemploy_roll = unemploy.rolling(12).mean()[12:]
        unemploy_roll.columns = ['unemploy_roll']
        unemploy = unemploy[12:]
        
        # 실업률 데이터 일별로 증폭
        unem = pd.DataFrame(index=df.index,columns=['unemploy'])
        unem_roll = pd.DataFrame(index=df.index,columns=['unemploy_roll'])

        for i in df.index[0:-15]:
            unem.loc[i] = unemploy.loc[str(i)[:7],'unemploy']
            unem_roll.loc[i] = unemploy_roll.loc[str(i)[:7],'unemploy_roll']

        df_rolling = df.rolling(200).mean()
        df_rolling.dropna(inplace=True)

        exchange = exchange[exchange.index.isin(df.index)]
        tlt = tlt[tlt.index.isin(df.index)]

        bond = exchange * tlt
        bond.dropna(inplace=True)
        bond.columns = ['bond']
        df = pd.concat([df,bond],axis=1) # df['bond'] = bond
        df.columns = df.columns[:-1].append(pd.Index(['bond']))

        rebal_period = {
            'week': bt.algos.RunWeekly(),
            'month': bt.algos.RunMonthly(),
            'quarter': bt.algos.RunQuarterly(),
            'year': bt.algos.RunYearly()
        }
        # 해당 종목의 데이터만 추출
        d = pd.DataFrame()
        Backtest.period_num = df.loc[self.today[0]:self.addDate(self.today[0],self.period), self.stocks[0]].index.size
        self.period = self.period + 30
        # 주가
        for i in range(len(self.today)):
            neww = df.loc[self.today[i]:self.addDate(self.today[i],self.period), self.stocks[i]]
            d[self.stocks[i]] = neww.reset_index(drop=True)

        # 주가 200 rolling
        for i in range(len(self.today)):
            neww = df_rolling.loc[self.today[i]:self.addDate(self.today[i],self.period), self.stocks[i]]
            d['roll'+self.stocks[i]] = neww.reset_index(drop=True)

        # 채권
        for i in range(len(self.today)):
            b = df.loc[self.today[i]:self.addDate(self.today[i],self.period), 'bond'].reset_index(drop=True)
            for j in range(len(b)-1):
                if np.isnan(b[0]):
                    b[0] = b[1]
                if np.isnan(b[j]):
                    b[j] = (b[j-1] + b[j+1])/2
            if np.isnan(b[len(b)-1]): 
                b[len(b)-1] = b[len(b)-2]
            d['bond'+self.stocks[i]] = b
        # 가중치 설정
        w = Backtest.user_input_s
        if len(Backtest.user_input_sb) != 0:
            Backtest.stock_bond = Backtest.user_input_sb

        # 주식60 채권40
        col_bond = ['bond'+ x for x in self.stocks]
        col64 = self.stocks + col_bond

        Backtest.new_w = pd.Series(index=col64)

        Backtest.new_w[:Backtest.nn] = (np.array(w)*Backtest.stock_bond[0]).tolist()
        Backtest.new_w[Backtest.nn:] = (np.array(w)*Backtest.stock_bond[1]).tolist()
        #print(Backtest.result_data.index.size)
        weight2 = Backtest.new_w.copy()
        portfolio_2 = bt.AlgoStack(
                            rebal_period['month'],
                            bt.algos.SelectThese(col64),
                            #bt.algos.WeighSpecified(**weight2),
                            self.WeighSpecified(weight2),
                            bt.algos.Rebalance()
                        )
        p2 = bt.Strategy('portfolio 2', [bt.algos.Or([log, portfolio_2])])

        d.index = list(map(lambda x: datetime.datetime.strptime(self.addDate('2015-01-01', x), '%Y-%m-%d'), d.index))
        d.dropna(inplace=True)
        
        backtest_p2 = bt.Backtest(p2, d[Backtest.new_w.index])
        result = bt.run(backtest_p2)

        Backtest.result_data.drop(Backtest.result_data.index[-1],inplace=True)
        stock = Backtest.result_data.fillna(method = 'bfill')
        indexs = Backtest.result_data.index
        for i in range(len(Backtest.result_data.index)):
            if i == 0:
                continue
            if indexs[i] == indexs[-1]:
                Backtest.result_data.drop(Backtest.result_data.tail(1).index, inplace=True)
            elif Backtest.result_data.loc[indexs[i], 'portfolio 2'] == 100:
                Backtest.result_data.loc[indexs[i], 'portfolio 2'] = (Backtest.result_data.loc[indexs[i-1], 'portfolio 2'] + Backtest.result_data.loc[indexs[i+1], 'portfolio 2'])/2

        return Backtest.result_data, Backtest.MDD_return, Backtest.DD_return, Backtest.period_num

class Portfolio:
    def __init__(self, stock_all, start_date, stock_index) :
        self.stock_all = stock_all
        self.start_date = start_date
        self.stock_index = stock_index 
    
    def sum_of_product( xs, ys ):
        return sum( x * y for x, y in zip( xs, ys ) )
    
    def sum_of_squares( v ):
        return sum_of_product( v, v )
    
    def deviation(xs):
        x_mean = sum(xs)/len(xs)
        return [ x - mean for x in xs]
        
    def variance(x):
        n = len(x)
        deviations = deviation(x)
        return  sum_of_squares( deviations ) / ( n-1 )
    #공분산
    def covariance(x, y):
        n = len(x)
        return sum_of_product(deviation(x), deviation(y)) / (n-1)
    
    # 표준편차를 계산하는 함수
    def standard_deviation( x ):
        return math.sqrt( variance( x ) ) # math 모듈의 제곱근 함수 sqrt( )를 사용

    # 상관계수를 계산하는 함수
    def correlation( xs, ys ):
        stdev_x = standard_deviation( xs )
        stdev_y = standard_deviation( ys )
        if stdev_x > 0 and stdev_y > 0:
            return covariance( xs, ys ) / ( stdev_x * stdev_y )
        else :
            return 0
    
    def get_covmat(self):
        ret_daily = self.stock_all.pct_change()
        cov_daily = ret_daily.cov()
        covmat = cov_daily * 250
        return covmat
        
    def cummax(nums):
        cum = []
        n_max = 0
        for x in nums:
            if x > n_max:
                n_max = x
            cum.append(n_max)
        return cum


    def MDD(stock):
        colunms =  stock.columns
        MDD_return = []
        DD_return = []
        stock = stock.fillna(method = 'bfill')
        for n in colunms:
            close_list = stock[n].to_list()
            drawdown = [x-y for x, y in zip(close_list, cummax(close_list))]
            DD_return.append([x/y * 100 for x, y in zip(drawdown,  cummax(close_list))])
            idx_lower = drawdown.index(min(drawdown))
            idx_upper = close_list.index(max(close_list[:idx_lower]))
            mdd = (close_list[idx_lower] - close_list[idx_upper])/close_list[idx_upper]
            MDD_return.append(mdd)
        return MDD_return, DD_return

    def stock_set(self):
        # 저변동성 전략
        # 저변동성 값들
        # input이 stock 별 close 값
        def LOWSTD(stocks):
            stock = stocks
            stock = stock.iloc[-252:]
            ret = stock.pct_change()
            std_daily = ret.std()
            stock["Date"] = stock.index
            stock["Day_name"] = stock["Date"].dt.day_name()
            price_mon = stock[stock["Day_name"] == 'Monday']
            price_mon = price_mon.drop(['Date','Day_name'], axis=1)
            week_mon_ret = price_mon.pct_change().dropna()
            std_weekly = week_mon_ret.std()
            stock_name = price_mon.columns
            
            vol_rank = pd.DataFrame(columns = ["Daily_std", "Weekly_std"], index = stock_name)
            vol_rank["Daily_std"] = std_daily
            vol_rank["Weekly_std"] = std_weekly
            #print(vol_rank)
            vol_rank["std_rank"] = vol_rank['Weekly_std'].rank(ascending = True) +vol_rank['Daily_std'].rank(ascending = True)
            
            vol_rank["std_rank"] = vol_rank["std_rank"].rank(ascending= True, method ='dense').astype(int)
            #print(vol_rank["std_rank"].to_list())
            vol_rank = vol_rank.drop(['Weekly_std', 'Daily_std'], axis = 1)
            return vol_rank
        
        # 가속화 모멘텀 전략
        # output : 각 가속 모멘텀 합
        # input : stock 별 close
        def MAR(stockss):
            def expotential_weight(x):
                m=2.7699877 
                t=0.30787386
                b=-1.05428235
                return list(map(lambda w :m * np.exp(-1* t * w) + b , x ) )
            
            w_list = list(range(1,13))
            w_list = expotential_weight(w_list)
            w_list.reverse()       
            stock = stockss
            
            stock["Date"] = pd.to_datetime(stock.index)
            stock = stock.set_index("Date")
            stock_end = stock.resample(rule = '1M').last()
            stock_end = stock_end.pct_change()
            stock_acc = (1+stock_end).cumprod()-1

            stock_acc_w = stock_acc.iloc[-12:]
            stock_acc_w["w"] = w_list
            for x in stock_acc_w.columns:
                stock_acc_w[x] = stock_acc_w[x] * stock_acc_w['w']
            stock_acc_w = stock_acc_w.drop(["w"],axis=1)
            stock_acc_w = stock_acc_w.sum()
            stock_acc_w = pd.DataFrame(stock_acc_w)
            
            stock_acc_w["mar_rank"] = stock_acc_w.rank(ascending = True, method = 'dense').astype(int)
            stock_acc_w = stock_acc_w.drop([0],axis=1)
            return stock_acc_w
        
        # 밸류 전략 input은 종목 Code
        # PBR 값들
        def VP(stocks):
            def get_financial_statements(stocks):
                table = []
                stock_present = []
                for stock in stocks:
                    get_param = {
                     'pGB':1,
                     'gicode':'A%s'%(stock),
                     'cID':'',
                     'MenuYn':'Y',
                     'ReportGB':'',
                     'NewMenuID':103, #101:snapshot 102:기업개요 103:재무제표 104:재무비율 105:투자지표
                     'stkGb':701,
                     }     
                    get_param = parse.urlencode(get_param)
                    url="http://comp.fnguide.com/SVO2/ASP/SVD_Invest.asp?%s"%(get_param)
                    try:
                        tables = pd.read_html(url, header=0)
                        df1 = tables[1]
                        #11, 12, 13, 14
                        table.append(df1)
                        stock_present.append(stock)
                    except:
                        continue


                return stock_present, table
            try:
                stocks = stocks.drop(['Date'], axis=1)
            except:
                print("")
            stocks = stocks.columns.to_list()
            stock = list((map(lambda x : x.split('/')[0],stocks)))
            stock_present, table = get_financial_statements(stock)
            vp_stock = pd.DataFrame()
            per = []
            pcr = []
            psr = []
            pbr = []
            
            for i in range(len(stock_present)):
                try:
                    pbr.append(float(table[i].iloc[14,-1]))
                    per.append(float(table[i].iloc[11,-2]))
                    pcr.append(float(table[i].iloc[12,-2]))
                    psr.append(float(table[i].iloc[13,-2]))
                except:
                    pbr.append(float(table[i].iloc[9,-1]))
                    per.append(float(table[i].iloc[8,-2]))
                    pcr.append(0)
                    psr.append(float(table[i].iloc[11,-2]))
                
            vp_stock["Code"] = stock_present
            vp_stock["per"] = per
            vp_stock["pcr"] = pcr
            vp_stock["psr"] = psr
            vp_stock["pbr"] = pbr
            vp_stock = vp_stock.fillna(0)
            vp_stock['vp_rank'] = vp_stock["per"].rank(ascending = False,na_option = 'top') +vp_stock["psr"].rank(ascending = False, na_option = 'top')
            vp_stock['vp_rank'] += vp_stock["pcr"].rank(ascending = False, na_option = 'top')+ vp_stock["pbr"].rank(ascending = False, na_option = 'top')
            vp_stock['vp_rank'] = vp_stock['vp_rank'].rank(ascending = True, method = 'dense').astype(int)
            vp_stock = vp_stock.drop(['per','pcr', 'psr','pbr'], axis=1)
            return vp_stock
        
        #재무제표 이해 필요
        def QUAILTY(stocks):
            return 0
        
        def PROFIT(stocks):
            return 0
        
        low = LOWSTD(self.stock_all)
        mar = MAR(self.stock_all)
        vp = VP(self.stock_all)
        return low, mar, vp
        #return vp
    

    #최소분산포트폴리오
    def MVP(self):
        def obj_variance(weights, covmat):
            vol = np.sqrt(np.dot(weights.T, np.dot(covmat, weights)))
            return vol
        
        n_assets = len(self.stock_all.columns)
        #print("n_assets : " + str(n_assets))
        
        weights = np.ones([n_assets]) / n_assets
        date_stride = 252
        ret_daily = self.stock_all.pct_change()
        ret_annual = ret_daily.mean() * date_stride
        #ret_annual = np.sum(ret_daily.mean() * self.stock_all)
        
        cov_daily = ret_daily.cov()
        cov_annual = cov_daily * date_stride
        
        bnds = tuple( (0., 1.) for i in range(n_assets))
        cons = ( {'type' : 'eq', 'fun': lambda w: np.sum(w)-1})
        res = minimize(obj_variance, weights,(cov_annual), method='SLSQP', bounds=bnds, constraints=cons )
        
        return res
    
    
    #최소분산포트폴리오 + 샤프지수 
    def MVP_sharp(self):
        def obj_sharpe(weights, returns, covmat, rf):
            ret = np.dot(weights, returns)
            vol = np.sqrt(np.dot(weights.T, np.dot(covmat, weights)))
            return 1 /((ret-rf)/np.sqrt(vol))
        
        n_assets = len(self.stock_all.columns)
        date_stride = 252
        rf = 0.01
        weights = np.ones([n_assets]) / n_assets
        
        ret_daily = self.stock_all.pct_change()
        ret_annual = ret_daily.mean() * date_stride
        #ret_annual = np.sum(ret_daily.mean() * self.stock_all)
        
        cov_daily = ret_daily.cov()
        cov_annual = cov_daily * date_stride
        
        bnds = tuple( (0., 1.) for i in range(n_assets))
        cons = ( {'type' : 'eq', 'fun': lambda w: np.sum(w)-1})
        res = minimize(obj_sharpe, weights,(ret_annual, cov_annual, rf), method='SLSQP', bounds=bnds, constraints=cons )

        weight = res.x
        
        return res    

    def MRC(self):
        def obj_variance(weights, covmat):
            vol = np.sqrt(np.dot(weights.T, np.dot(covmat, weights)))
            #print(vol)
            mrc = np.dot(covmat, weights)/vol
            #print(mrc)
            rc = mrc * weights
            
            #print(rc)
            rc = rc / np.sum(rc)
            res = np.sum((rc - rc/len(rc))**2)
            #print(res) 
            return res 
        
        n_assets = len(self.stock_all.columns)
        #print("n_assets : " + str(n_assets))
        
        weights = np.ones([n_assets]) / n_assets
        date_stride = 252
        ret_daily = self.stock_all.pct_change()
        
        cov_daily = ret_daily.cov()
        cov_annual = cov_daily * date_stride
        
        bnds = tuple( (0., 1.) for i in range(n_assets))
        cons = ( {'type' : 'eq', 'fun': lambda w: np.sum(w)-1})
        res = minimize(obj_variance, weights,(cov_annual), method='SLSQP', bounds=bnds, constraints=cons )
        
        return res

def get_all_fdr_symbols(c_d):
    all_stocks = pd.DataFrame()
    for i in range(len(c_d)):
        code = c_d[i].split('/')[0]
        start = c_d[i].split('/')[1]    
        tmp_close = fdr.DataReader(code,start)['Close']
        all_stocks = pd.concat([all_stocks, tmp_close], axis=1)
    all_stocks.columns=c_d
    return all_stocks

def code_to_six(x):
    x = str(x)
    while len(x)!=6:
        x = "0" + x
    return x

def similar_date_start(x):
    if x == '[]':
        return None
    else:
        x = x[1:-2]
        x = x.split(',')
        tmp = ""
        for date in x:
            date = date.replace(" ","")
            date = date.replace("'","")
            tmp = tmp + date.split('~')[0] + '/'
        return tmp


csv_filename1 = os.path.join(os.path.dirname(__file__), 'top_200.csv')
csv_filename2 = os.path.join(os.path.dirname(__file__), 'top_200_clustering.csv')
k2_result = os.path.join(os.path.dirname(__file__), 'KS200_result.csv')
k1_result = os.path.join(os.path.dirname(__file__), 'K100_result.csv')
kq_result = os.path.join(os.path.dirname(__file__), 'KQ_result.csv')

user_dict = {
    'type' : ['안정형', ' 안정추구형', '위험중립형', ' 적극투자형', '공격추가형'],
    'expect' : [0.1, 0.2, 0.3, 0.5, 1],
    'loss' : [0.1, 0.2, 0.3, 0.5, 1],
}

dd = fdr.StockListing('KRX')
d_set = {}
for x , y in dd[['Code','Name']].values:
    d_set[x]=y


@api_view(['GET'])
def get_top_output(request):
    if request.method == 'GET':
        result = {}
        
        s_result = pd.read_csv(k2_result, header=0, dtype=object)
        sector = s_result['Sector'].tolist()
        top_sector_stock = s_result['Code'].tolist()
        tmp = []
        for i in range(len(top_sector_stock)):
            tmp.append(d_set[top_sector_stock[i]])
        print(tmp)
        top_output = ['삼성전자', '유한양행', '금호석유', 'Naver', '기아', '효성', 'BNK금융지주', '한온시스템', 'SK이노베이션']
        result['top'] = top_output
        return JsonResponse({'result' : tmp})

@api_view(['GET'])
def get_portfolio_output(request):
    if request.method == 'GET':
        result = {}
        print('run pf output')
        market = request.GET['market']
        sector = request.GET['sector']
        ratio = request.GET['s_ratio']
        sector = sector.replace('[','').replace(']','').split(',')
        user_holding = request.GET['holding_date']
        user_holding = int(user_holding)
        
        s_result =''
        if market == 'KOSPI200':
            s_result = pd.read_csv(k2_result, header=0, dtype=object)
        elif market == 'KOSPI100':
            #s_result = pd.read_csv(k1_result, header=0, dtype=object)
            s_result = pd.read_csv(k2_result, header=0, dtype=object)
        elif market == 'KOSDAQ':
            #s_result = pd.read_csv(kq_result, header=0, dtype=object) 
            s_result = pd.read_csv(kq_result, header=0, dtype=object) 

        s12_result = s_result[[(x in sector) for x in s_result['Sector'] ]]
        silmilar = s12_result['s_date'].to_list()
        r_sector = s12_result['Sector'].to_list()
        r_code = s12_result['Code'].to_list()
        print(r_code)
        r_name = []
        
        for x in r_code:
            d_name = d_set[x]
            r_name.append(d_name)
        
        s12_pct = pd.DataFrame()
        for i in range(len(s12_result)):
            code = s12_result.iloc[i,0]
            s_date = s12_result.iloc[i,3]
            date = datetime.datetime.strptime(s_date,'%Y-%m-%d')
            e_date = str(date + datetime.timedelta(days=400))
            stock = fdr.DataReader(code, s_date, e_date)['Close']
            stock = pd.DataFrame(stock)
            s12_pct[s12_result['Code'].iloc[i]] = stock['Close'][:252].to_list()
        
        s12_port = Portfolio(s12_pct, "","")

        w1 = list(s12_port.MVP().x)
        w2 = list(s12_port.MVP_sharp().x)
        w3 = list(s12_port.MRC().x)
           
        print(s12_pct)
 
        expect = user_dict['expect'][0]
        loss = user_dict['loss'][0]
        def obj_variance(weights, stock,covmat):
            vol = np.sqrt(np.dot(weights.T, np.dot(covmat, weights)))
            ret = stock * weights
            ret = ret.sum(axis=1)
            ret = ret.fillna(ret.mean())
            ret = ret.tolist()[-1] - 1
            print(vol)
            VaR_1 = 1 * vol**2 / 100 * (user_holding)**0.5 * 2.33
            
            if ( ret - expect > 0 )& (VaR_1 < loss):
                return 0
            elif( ret - expect > 0 ):
                return (VaR_1 - loss)**2
            elif(VaR_1 < loss):
                return (ret-expect)**2
            return (ret-expect)**2 + (VaR_1 - loss) ** 2
        
        n_assets = len(s12_pct.columns)
        #print("n_assets : " + str(n_assets))
        weights = np.ones([n_assets]) / n_assets
        ret_daily = s12_pct.pct_change() + 1
        ret_daily = ret_daily.replace([np.inf,-np.inf], np.nan).cumprod()
        
        bnds = tuple( (0., 1.) for i in range(n_assets))
        cons = ( {'type' : 'eq', 'fun': lambda w: np.sum(w)-1})
        cov_daily = ret_daily.cov()
        cov_annual = cov_daily * user_holding
        res = minimize(obj_variance, weights,(ret_daily,cov_annual), method='SLSQP', bounds=bnds, constraints=cons, options = {'maxiter' : 100})
        
        
        weight_list = [w1, w2, w3, list(res.x)]
        
        pf_ = s12_pct.pct_change()
        ks11 = fdr.DataReader('KS11', start='2021-10-01')
        ks11 = ks11.iloc[-(user_holding+1):]
        market_return = ks11['Close'].pct_change()+1
                
        t_port = {}
        t_port['similar_date'] = silmilar
        t_port['stocks'] = r_name
        t_port['sector'] = r_sector
        t_port['weight'] = weight_list
        result['result'] = t_port
        
        
        today = silmilar # 포트폴리오 유사시점
        
        user_w = 0 # 일반:0, 샤프 지수:1, 위험균형:2
        user_input_sb = [float(ratio), 1-float(ratio)] #[0.6,0.4] # p1 : 종목 채권
        user_input_s = [] # 종목별 비중

        stocks = r_name
        stock_bond = w1
        input_rebal_period = 'week' # week month quarter
        period = 300

        #model_w = [w1,w2] #[[0.3,0.5,0.2],[0.2,0.8],[0.4,0.6]]
        now = today[0]
        #result_data = pd.DataFrame()
        name = ['최대분산P','샤프P', '위험균형P', 'testP']
        
        market_return[0] = 1.0
        for i in range(len(name)):
            port1 = {}
            weight = weight_list[i]
            
            pf = pf_.iloc[-user_holding:]
            pf1_var = np.dot(np.array(weight).T, np.dot(pf.cov(), np.array(weight))) 
            pf1_vol = np.sqrt(pf1_var)
            pf1_return = pf + 1
            pf1_return = pf1_return.replace([np.inf,-np.inf], np.nan)
            pf1_return = pf1_return.cumprod() * weight
            pf1_return = pf1_return.sum(axis=1)
            pf1_return = pf1_return.fillna(pf1_return.mean())
            pf1_return[0] = 1.0
            cov = np.cov(pf1_return.tolist(), market_return.tolist())[0,1]

            beta = cov/ks11['Close'].pct_change().var()
            sharpe_1 = (pf1_return.tolist()[-1] - market_return.tolist()[-1]) / pf1_vol
            trainer_1 = (pf1_return.tolist()[-1] - market_return.tolist()[-1]) / beta
            zensen_1 = (pf1_return.tolist()[-1]- ((market_return.tolist()[-1]) + beta * (market_return.tolist()[-1] - 0.01)))
            
            VaR_1 = 100 * pf1_var/100 * (user_holding)**0.5 * 2.33
            VaR_2 = 100 * pf1_var/100 * (user_holding)**0.5 * 1.65
            
            port1['VaR'] = [VaR_1, VaR_2]
            port1['risk'] = [sharpe_1, trainer_1, zensen_1]
            
            start = time.time()
            result_data, mdd, dd, period_num = Backtest(stocks=stocks, period=user_holding, input_rebal_period = input_rebal_period,today=today, user_input_s = weight, user_input_sb=user_input_sb)() # 필수 매개변수: 종목명, 날짜
            #print(result_data)
            print("time: ", time.time() - start)
            result_data = result_data.rename_axis('date').reset_index()
            result_data.rename(columns = {'portfolio 2': 'price'}, inplace = True )
            
            result_data['VaR1'] = 100
            result_data['VaR1'] = result_data['VaR1'] * np.arange(1,len(result_data['VaR1']) +1 ) / len(result_data['VaR1'])  * (user_holding)**0.5 * pf1_var/100 * 2.33
            result_data['VaR2'] = 100
            result_data['VaR2'] = result_data['VaR2'] * np.arange(1,len(result_data['VaR2']) +1 ) / len(result_data['VaR2'])  * (user_holding)**0.5 * pf1_var/100 * 1.65
            
            port1['p_num'] = period_num
            port1['mdd'] = mdd
            port1['dd'] = dd
            
            # -holding_date 를 바꾸워서 다시 하기
            
            # 젠센 및 다른 내용 확인
             
            # start = time.time()
            # result_data, mdd, dd, period_num = Backtest(stocks=stocks, period=user_holding, input_rebal_period = input_rebal_period,today=today, user_input_s = weight, user_input_sb=user_input_sb)() # 필수 매개변수: 종목명, 날짜
            # print("time: ", time.time() - start)
            # result_data = result_data.rename_axis('date').reset_index()
            # result_data.rename(columns = {'portfolio 2': 'price'}, inplace = True )

            # port1['mdd'] = mdd
            # port1['dd'] = dd
            
            
            port1["data"] = result_data.to_dict('records')
            
            result[name[i]] = port1
            
        #print (result)
        return JsonResponse({'result' : result})
    
    
@api_view(['GET'])
def get_sector_output(request):
    if request.method == 'GET':
        t200 = pd.read_csv(csv_filename1,header=0, index_col=0)
        c200 = pd.read_csv(csv_filename2 ,header=0, index_col=0)    
        print(t200)
        print(c200)
        t200["Code"] = list(map(lambda x : code_to_six(x) ,t200["Code"].to_list() ))
        symbols = t200["Code"]
        symbols_len = len(symbols)
        symbols_start = []
        symbols_end = []
        c_d = []

        c200['Today_Date'] = list(map(lambda x : x.split('~')[0], c200['Today_Date']))
        c200['Similar_Dates'] = list(map(lambda x : similar_date_start(x), c200['Similar_Dates']))

        for x in range(symbols_len):
            code = t200.iloc[x]["Code"]
            sector = t200.iloc[x]["Sector"]
            cluster = c200[c200["Sector"]== sector]
            s_date = cluster['Today_Date']
            try:
                e_date = cluster.iloc[0,2]
            except:
                continue

            if e_date==None:
                continue
            else:
                for i in e_date.split('/'):
                    if i != '':
                        c_d.append(code+'/'+i)

        for i in range(len(c_d)):
            start = datetime.date.fromisoformat(c_d[i].split('/')[1]) - timedelta(days=15)
            symbols_start.append(start.strftime('%Y-%m-%d'))
            end = datetime.date.fromisoformat(symbols_start[i]) + timedelta(days=60)
            symbols_end.append(end.strftime('%Y-%m-%d'))

        stock_all = get_all_fdr_symbols(c_d)
        stock_all = stock_all.reindex(stock_all.index.sort_values())
        try:
            stock_all = stock_all.drop(['Date'], axis=1)
        except:
            stock_all = stock_all
        port = Portfolio(stock_all, "2022-08-16", stock_all.index)
        low, mar, vp = port.stock_set()
        vp_dd = vp.drop_duplicates()
        vp_dd = vp_dd.set_index('Code',drop=True)
        vp_index = low.index
        vp_df = pd.DataFrame(index = vp_index)
        tmp = []

        for i in range(len(low)):
            vp_code = vp_index[i].split('/')[0]
            try:
                tmp.append(vp_dd.at[vp_code, 'vp_rank'])
            except:
                tmp.append(vp_dd['vp_rank'].max()+1)
        vp_df["vp_rank"] = tmp
        ranking = pd.concat([low,mar,vp_df], axis=1)
        
        f_w = [0.3, 0.3, 0.3]
        
        ranking['f_rank'] = ranking['std_rank'] * f_w[0] + ranking['mar_rank'] * f_w[1] + ranking['vp_rank'] *  f_w[2]
        ranking['f_rank'] = ranking['f_rank'].rank(method = 'dense')
        rank_set = pd.DataFrame(columns=['s_date','f_rank'], index = t200['Code'].to_list())
        rank_set['f_rank'] = 10000

        for i in range(len(ranking)):
            r_code = ranking.index[i].split('/')[0]
            r_date = ranking.index[i].split('/')[1]
            r_rank = ranking.iloc[i,3]
            if rank_set.loc[r_code,'f_rank'] > r_rank:
                rank_set.loc[r_code, 'f_rank'] = r_rank
                rank_set.loc[r_code, 's_date'] = r_date

        sector_data = t200
        sector_data = sector_data.set_index('Code', drop=True)
        sector_data['f_rank'] = 10000
        sector_data['s_date'] = ''
        for index in rank_set.index:
            f_rank = rank_set.loc[index,'f_rank']
            s_date = rank_set.loc[index,'s_date']
            sector_data.loc[index,'f_rank'] = f_rank
            sector_data.loc[index, 's_date'] = s_date
        s_result = sector_data[sector_data['f_rank']!=10000].sort_values(by= ['Sector', 'f_rank'], ascending = [False, True]).drop('Name',axis=1).drop_duplicates(['Sector'], keep='first')
        s_result = s_result.sort_values(by = 'f_rank')
        #print(s_result)
        s_result.to_csv('./KS200_result.csv')
        
        return JsonResponse({"Success" : "True"})
 
@api_view(['GET'])
def get_sector_updown(request):
    if request.method == 'GET':
        db = client.newDB
        sector_collection = db.data_sector
        
        s_result = pd.read_csv(k2_result, header=0, dtype=object)
        sector = s_result['Sector'].tolist()
        top_sector_stock = s_result['Code'].tolist()
        similar_date = s_result['s_date'].tolist()
        all_result = {}
        up = []
        down = []
        recent= []
        recent_k2=[]
        recent_k1 =[]
        recent_kq = []
        for i in range(len(sector)):
            sector_avg = {}
            sector_name = sector[i]
            start_date = similar_date[i]
            id = sector_collection.find({"Name" : sector_name, "Date" : { '$gte' : start_date , '$lt': (datetime.datetime.strptime(start_date, '%Y-%m-%d') + timedelta(days=40)).strftime('%Y-%m-%d')}}, {"_id" : 0, 'Name' : 0})
            tmp = list(id).copy()
            if tmp == []:
                continue
            df = pd.DataFrame(tmp)
            df['avg'] = df['avg']/100 +1
            df['avg'] = df['avg'].cumprod()
            avg = (df['avg'].iloc[-1] -1) * 100
            sector_avg['sector'] = sector_name
            sector_avg['data'] = avg
            print(sector_avg)
            recent_k2.append(sector_avg)
            recent_k1.append(sector_avg)
            if(avg < 0):
                down.append(sector_avg)
            else:
                up.append(sector_avg)

        recent_k1 = sorted(recent_k1, key=lambda avg: avg['data'],reverse=True)
        recent_k2 = sorted(recent_k2, key=lambda avg: avg['data'],reverse=True)
        up = sorted(up, key=lambda avg: avg['data'],reverse=True)
        down = sorted(down, key=lambda avg: avg['data'],reverse=False)
               
        recent.append(recent_k1)
        recent.append(recent_k2)
        recent.append(recent_kq)
        print(recent)
        all_result['recent'] = recent
        all_result['up'] = [up, up, []]
        all_result['down'] = [down, down, []]
        return JsonResponse({'result' : all_result})